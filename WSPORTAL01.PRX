#INCLUDE "WSPORTAL01.ch"
#INCLUDE "APWEBSRV.CH"
#INCLUDE "PROTHEUS.CH"

//#TRANSLATE AddInfo( <aX> , <cInf> , <xInf> ) => IF <xInf> != NIL ; aadd(<aX>,{ <cInf> , <xInf> , NIL } ) ; Endif
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³WSPORTAL01³ Autor ³Eduardo Riera          ³ Data ³07.03.2003  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Rotina de Manutencao do cadastro de usuarios do Portal       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ FATA190                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ CRM/Materiais/Portais                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Atualizacoes sofridas desde a Construcao Inicial.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Programador  ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Emerson Campos|30/04/14|TPKFN9     |Replica das alterações realizadas    ³±±
±±³              |        |           |pela manutenção até a data 17/02/14  ³±± 
±±³              |        |           |chamado TIIMPE, changeset 207647     ³±±
±±³              |        |           |na P11.80 e remoção alguns fieldpos  ³±±
±±³Joao Balbino  |10/08/15|TTBGLC     |Tratamento para validar login pelo   ³±±
±±³              |        |           |parâmetro MV_TCFVREN.                ³±±
±±³Renan Borges  ³21/10/15³TTIWSF     ³Ajuste para ao alterar a senha no Por³±±
±±³              ³        ³           ³tal de Gestão do Capital Humano, a se³±±
±±³              ³        ³           ³nha na tabela de Cadastro de Funcioná³±±
±±³              ³        ³           ³rios (SRA) seja alterada também. Pro-³±±
±±³              ³        ³           ³blema ocorria quando o portal estava ³±±
±±³              ³        ³           ³configurado com mais de 1 instância, ³±±
±±³              ³        ³           ³com isso o posicionamento na SRA deve³±±
±±³              ³        ³           ³ser feito, para não correr o risco de³±±
±±³              ³        ³           ³ ao realizar a busca, não encontrar  ³±±
±±³              ³        ³           ³caso a informação se encontra em uma ³±±
±±³              ³        ³           ³instância diferente.                 ³±±
±±³Allyson M     ³30/10/15³TTPURR	  ³Ajuste para permitir login de funcio-³±± 
±±³              ³        ³      	  ³nários demitidos quando parametro    ³±± 
±±³              ³        ³     	  ³MV_TCFVREN estiver habilitado.       ³±±
±±³Renan Borges  ³09/12/15³TTSYXZ     ³Alteração apenas para carregar fonte ³±±
±±³              ³        ³           ³correto no d-1.                      ³±±
±±³Esther V.     ³07/12/15³PCDEF-87091³Incluida validacao de uso para tabela³±± 
±±³              ³        ³      	   ³BSW antes de verificar registro.     ³±± 
±±³Vitor Pires   ³10/12/15³TTUREY     ³ajuste de busca dos itens do Menu  e ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Definicao da estruturas utilizadas                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
WSSTRUCT SAmbiente
	WSDATA RpoRelease           AS String
	WSDATA Versao	            AS String
ENDWSSTRUCT
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Definicao da estruturas utilizadas                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
WSSTRUCT LoginUserStruct
WSDATA USERCODE             AS String OPTIONAL
WSDATA USERLOGIN            AS String
WSDATA USERPASSWORD         AS String     
WSDATA USEREMAIL	    	AS String OPTIONAL
WSDATA USERWS               AS String OPTIONAL
WSDATA USERNAME             AS String
WSDATA USERROLES            AS Integer
WSDATA USERACCESSES         AS Array Of LoginAccessesStruct OPTIONAL
WSDATA USERACCESSESHEADER   AS Array Of String OPTIONAL
WSDATA USERENTIRIES         AS Array Of LoginEntiryStruct OPTIONAL
WSDATA USERENTIRIESHEADER   AS Array Of String OPTIONAL
WSDATA USERSUPER            AS String OPTIONAL
WSDATA USERSKIN             AS String OPTIONAL
WSDATA USERGROUP            AS String OPTIONAL
WSDATA USERLOGPLS			AS LOGINVIEW OPTIONAL
ENDWSSTRUCT
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Definicao da estruturas da composicao dos atalhos      			   ³
// Struct inserida aqui para não causar dependencia com o WSPLSXFUN
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
WSSTRUCT SAtalhos
		WSDATA CodMnu	 	AS String  OPTIONAL  //Descricao do atalho
		WSDATA Descri	 	AS String  OPTIONAL  //Imagem do atalho
		WSDATA Imagem	 	AS String  OPTIONAL  //Codigo do menu
		WSDATA WebSrv     AS String OPTIONAL  //WebService do Menu
		WSDATA Rotina     AS String OPTIONAL  //Rotina do Menu
ENDWSSTRUCT
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Estrutura para o login no PLS										   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
WSSTRUCT LOGINVIEW
	WSDATA UserLoginCode			AS String OPTIONAL
	WSDATA UserEMail				AS String OPTIONAL
	WSDATA IntDat					AS Integer OPTIONAL
	WSDATA TipCar					AS String OPTIONAL
	WSDATA Biometria				AS String OPTIONAL
	WSDATA BiometriaCad			AS String OPTIONAL
	WSDATA ModBio					AS String OPTIONAL
	WSDATA TpPortal					AS Integer
	WSDATA DataServer				AS Date OPTIONAL 
	WSDATA ListOfRDA				AS Array Of RDAView OPTIONAL
	WSDATA ListOfOPE				AS Array Of SOperadora OPTIONAL
	WSDATA ListOfAcs				AS Array Of SAtalhos OPTIONAL
ENDWSSTRUCT

WSSTRUCT LoginEntiryStruct
WSDATA ENTIRY     AS String
WSDATA ID_ENTIRY  AS String
WSDATA NICKNAME   AS String OPTIONAL
WSDATA NAME       AS String OPTIONAL
WSDATA FederalID  AS String OPTIONAL
WSDATA Skin       AS String OPTIONAL	
ENDWSSTRUCT

WSSTRUCT LoginMenu
WSDATA CODE          AS String
WSDATA Description   AS String
WSDATA SuperiorCode  AS String
WSDATA WebService    AS String
WSDATA ProcedureCall AS String	
WSDATA Order         AS Integer
WSDATA MenuIsBlocked AS Boolean Optional
WSDATA ApvlVision	 AS String Optional
WSDATA ApvlInitLevel AS Integer Optional
WSDATA ApvlLevels  	 AS Integer Optional
ENDWSSTRUCT

WSSTRUCT LoginAccessesStruct
WSDATA WEBSRV     AS String
WSDATA NAME       AS String
WSDATA WKFAPV     AS String
ENDWSSTRUCT
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Definicao do Web Service de Controle do Usuario                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
WSSERVICE UserPortal    DESCRIPTION STR0001 NAMESPACE "http://webservices.microsiga.com.br/userportal.apw" //"Serviço de controle e atualização dos usuários de portais"
WSDATA Header           As Array Of BrwHeader
WSDATA HeaderType       As String
WSDATA USERCODE         AS String
WSDATA USERLOGIN        AS String
WSDATA USERPASSWORD     AS String 
WSDATA USEROLDPASSWORD  AS String
WSDATA PORTALACCESS		As String OPTIONAL	//Tipo de acesso ao portal. 1=Acesso por e-mail; Qualquer outro, acesso por CPF.
WSDATA USERTYPE         AS String OPTIONAL
WSDATA USERIPADDR       AS String OPTIONAL //Ip do usuario que está acessando o portal
WSDATA USERPCODE        AS LoginUserStruct
WSDATA USERSGROUP       AS Array Of LoginUserStruct OPTIONAL
WSDATA USERLISTPORTAL   AS Array Of GenericStruct
WSDATA USERPORTALCODE   AS String
WSDATA USERLISTMENU     AS Array Of LoginMenu
WSDATA OK               AS Integer
WSDATA CLIENTS          AS Array Of String
WSDATA InfAmbiente		AS SAmbiente

WSMETHOD PrtHeader      		DESCRIPTION STR0002 //"Método que descreve as estruturas de retorno do serviço "
WSMETHOD PrtLogin       		DESCRIPTION STR0003 //"Método de validação do Login do usuário"
WSMETHOD PrtLogout      		DESCRIPTION STR0004 //"Método de logout do usuário"
WSMETHOD PrtGetGroup    		DESCRIPTION STR0005 //"Método de listagem dos grupos ou usuários vinculados ao usuário 'Administrador'"
WSMETHOD PrtPutUser     		DESCRIPTION STR0006 //"Método de atualização das informações do usuário ou grupo do portal. <br><br><i>A manipulação dos direitos somente pode ser feita pelo 'Administrador'</i>"
WSMETHOD PrtPswUser     		DESCRIPTION STR0007 //"Método de atualização da senha do usuário"
WSMETHOD PrtListPortals 		DESCRIPTION STR0008 //"Método de listagem dos portais disponiveis. <br><br><i>Este método não analisa os direitos de acesso aos portais.</i>"
WSMETHOD PrtListMenu    		DESCRIPTION STR0009 //"Método de listagem do menu dos portais. <br><br><i> Este método demonstra o menu do usuário conforme os direitos de acesso aos web services publicados no sistema</i>"
WSMETHOD PrtGetClientsByUser  	DESCRIPTION ""
WSMETHOD PrtAmbiente		  	DESCRIPTION "Retorna informação do ambiente"
ENDWSSERVICE

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PRTHEADER ³Autor  ³ Eduardo Riera         ³ Data ³27.11.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Método de recuperacao dos headers das estruturas de usuario  ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Nome da estrutura                                     ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica que o metodo foi avaliado com sucesso          ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo efetuar o login do usuario no  ³±±
±±³          ³sistema                                                      ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ CRM/Materiais/Portais                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Atualizacoes sofridas desde a Construcao Inicial.                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Analista     ³ Data   ³ BOPS ³  Motivo da Alteracao                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Tatiane V. M.³02/04/07³122203³Alterado para respeitar o idioma do am-  ³±±
±±³              ³        ³      ³biente.                                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
WSMETHOD PRTHEADER WSRECEIVE HEADERTYPE WSSEND HEADER WSSERVICE UserPortal

Local nX 		:= 0
Local cIdiom	:= FWRetIdiom()        //Retorna Idioma Atual

::HeaderType := Upper(::HeaderType)

Do Case
	Case ::HeaderType == "LOGINMENU"
		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("AI8_CODMNU")
		::Header[nX]:HeaderField   := "CODE"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)

		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			                      

		If cIdiom == 'es'       
    		::Header[nX]:HeaderTitle   := RetTitle("AI8_TEXTOS")			      
  		ElseIf cIdiom == 'en' 
    		::Header[nX]:HeaderTitle   := RetTitle("AI8_TEXTOE")				      
   		Else
    		::Header[nX]:HeaderTitle   := RetTitle("AI8_TEXTO")			      
   		Endif
		
		::Header[nX]:HeaderField   := "DESCRIPTION"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)

		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("AI8_CODPAI")
		::Header[nX]:HeaderField   := "SUPERIORCODE"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)

		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("AI8_WEBSRV")
		::Header[nX]:HeaderField   := "WEBSERVICE"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)

		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("AI8_ROTINA")
		::Header[nX]:HeaderField   := "PROCEDURECALL"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)

	Case ::HeaderType == "LOGINUSERSTRUCT"
		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("AI3_CODUSU")
		::Header[nX]:HeaderField   := "USERCODE"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)
		
		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("AI3_LOGIN")
		::Header[nX]:HeaderField   := "USERLOGIN"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)
		
		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("AI3_PSW")
		::Header[nX]:HeaderField   := "USERPASSWORD"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)
		
		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("AI3_NOME")
		::Header[nX]:HeaderField   := "USERNAME"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)
		
		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("AI3_ADMIN")
		::Header[nX]:HeaderField   := "USERROLES"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)
		
		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("AI3_GRUPO")
		::Header[nX]:HeaderField   := "USERGROUP"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)
		
		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("AI3_SKIN")
		::Header[nX]:HeaderField   := "USERSKIN"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)
		
	Case ::HeaderType == "LOGINENTIRYSTRUCT"
	
		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := "Entidade"
		::Header[nX]:HeaderField   := "ENTIRY"
		::Header[nX]:HeaderPicture := "@!"
		::Header[nX]:HeaderSize    := 3
		::Header[nX]:HeaderDec     := 0
		::Header[nX]:HeaderType    := "C"
		::Header[nX]:HeaderComboBox:= ""
		::Header[nX]:HeaderOblig   := .F.

		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("A1_COD")
		::Header[nX]:HeaderField   := "ID_ENTIRY"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)

		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("A1_COD")
		::Header[nX]:HeaderField   := "ID_ENTIRY"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)		
		
		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("A1_NREDUZ")
		::Header[nX]:HeaderField   := "NICKNAME"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)	
		
		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("A1_NOME")
		::Header[nX]:HeaderField   := "NAME"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)	
		
		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("A1_CGC")
		::Header[nX]:HeaderField   := "FEDERALID"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)	

		aadd(::Header,WSClassNew("BrwHeader"))
		nX++			
		::Header[nX]:HeaderTitle   := RetTitle("AI3_SKIN")
		::Header[nX]:HeaderField   := "SKIN"
		::Header[nX]:HeaderPicture := SX3->X3_PICTURE
		::Header[nX]:HeaderSize    := SX3->X3_TAMANHO
		::Header[nX]:HeaderDec     := SX3->X3_DECIMAL
		::Header[nX]:HeaderType    := SX3->X3_TIPO
		::Header[nX]:HeaderComboBox:= X3CBox()
		::Header[nX]:HeaderOblig   := X3OBRIGAT(SX3->X3_CAMPO)	

EndCase
Return(.T.)
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PrtLogin  ³Autor  ³ Eduardo Riera         ³ Data ³11.03.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Metodo de Login para os portais                              ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo do usuario                                     ³±±
±±³          ³ExpN2: Senha do usuario                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica que o metodo foi avaliado com sucesso          ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo efetuar o login do usuario no  ³±±
±±³          ³sistema                                                      ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ CRM/Materiais/Portais                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
WSMETHOD PRTLOGIN WSRECEIVE USERLOGIN,USERPASSWORD,USERTYPE,PORTALACCESS,USERIPADDR WSSEND USERPCODE WSSERVICE UserPortal
LOCAL cSeq		:= ''
LOCAL _nH		:= 0
LOCAL aArea     := GetArea()
LOCAL aUser     := {}
LOCAL lRetAtivo	:= .F.
LOCAL lRetorno  := .F.
LOCAL lRetRD0	:= .F.
LOCAL cPrimNome := ""
LOCAL aRetorno 	:= {}
LOCAL cMsg		:= ""
LOCAL cMsg2		:= ""
LOCAL cCodAce	:= ""
LOCAL nZ        := 0       
LOCAL nX        := 0       
LOCAL nY		:= 0   
LOCAL nI		:= 0
LOCAL nW		:= 0
LOCAL nTp		:= 1
LOCAL aRetOpe	:= {}
LOCAL aRetEmp	:= {}
LOCAL aRetCon	:= {}
LOCAL aRetSub	:= {}
LOCAL aRetBen	:= {}
Local aRetFun	:= {}
Local lFuncSRA	:= .F.
Local nAtivSRA	:= 0
Local cIdiom	:= FWRetIdiom()        //Retorna Idioma Atual

DEFAULT ::UserType := "1"
DEFAULT ::UserPCode := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica a senha do usuario³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Do Case
	Case ::UserType == "1"
		dbSelectArea("AI3")
		dbSetOrder(2)
		If MsSeek(xFilial("AI3")+::USERLOGIN)
			If AllTrim(::USERLOGIN) == AllTrim(AI3->AI3_LOGIN) .And. ALLTrim(AI3->AI3_PSW) == ALLTrim(::USERPASSWORD)
				PrtIniUser(AI3->AI3_CODUSU,Self:USERPCODE)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Inializa as variaveis publicas para controle de usuario                 ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				aUser := {::USERPCODE:USERCODE,;
					::USERPCODE:USERLOGIN,;
					::USERPCODE:USERPASSWORD,;
					::USERPCODE:USERNAME,;
					::USERPCODE:USERROLES,;
					::USERPCODE:USERWS,;
					::USERPCODE:USERSUPER,;
					{},;
					AI3->AI3_USRSIS}
				For nX := 1 To Len(::USERPCODE:USERENTIRIES)
					aadd(aUser[8],{::USERPCODE:USERENTIRIES[nX]:ENTIRY,;
						::USERPCODE:USERENTIRIES[nX]:ID_ENTIRY,;
						::USERPCODE:USERENTIRIES[nX]:NAME,;
						::USERPCODE:USERENTIRIES[nX]:NICKNAME,;
						::USERPCODE:USERENTIRIES[nX]:FederalID,;
						::USERPCODE:USERENTIRIES[nX]:Skin})
				Next nX
		
				PutGlbVars("c"+AI3->AI3_CODUSU,aUser)
		
				lRetorno := .T.
			Else
				SetSoapFault(STR0010,STR0011) //"LOGIN INVALIDO"###"A senha informada esta incorreta"
				lRetorno := .F.	
			EndIf
		Else
			SetSoapFault(STR0010,STR0012) //"LOGIN INVALIDO"###"O usuario informado esta incorreto"
			lRetorno := .F.
		EndIf
	Case ::UserType == "2"
	
		UnifiedLoginRH(@lRetorno,::USERLOGIN,::USERPASSWORD,::USERTYPE,::PORTALACCESS,,@aUser,@Self:USERPCODE)

	Case ::UserType == "3"
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³PswOrder(nOrder): seta a ordem de pesquisa                   ³
		//³nOrder -> 	1: ID;                                          ³
		//³				2: nome;                                        ³
		//³				3: senha;                                       ³
		//³				4: e-mail (não implementado).                   ³
		//³                                                             ³
		//³PswSeek(cSeek,lUser): faz pesquisa (retorna .T./.F. se achar)³
		//³cSeek -> string a ser procurada.                             ³
		//³lUser -> 	.T.: pesquisa usuários (padrão);                ³
		//³				.F.: pesquisa grupos.                           ³
		//³                                                             ³
		//³PswRet(nReg): retorna vetor com informações do usuário/grupo ³
		//³nReg -> 	número do registro conforme planilha anexada;       ³
		//³			NIL: todos os registros                             ³
		//³			1: 1o. registro                                     ³
		//³			2: 2o. registro                                     ³
		//³			3: 3o. registro                                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		PswOrder( 2 )
		
		If PswSeek( ::UserLogin )
			If PswName( ::UserPassword )
				lRetorno := .T.
			Else
				lRetorno := .F.
	
				SetSoapFault( STR0010, "A senha informada esta incorreta" ) //"LOGIN INVALIDO"
			
			Endif
			
			If lRetorno
				aRetUsr := PswRet()
	
				If aRetUsr[1][17]
					lRetorno := .F.
		
					SetSoapFault( STR0010, "Usuario bloqueado" ) //"LOGIN INVALIDO"
				Else
					lRetorno := .T.
				Endif
				
				If lRetorno
					If SubStr( aRetUsr[2][5], 44, 1 ) == "S"
						lRetorno := .T.
					Else
						lRetorno := .F.
			
						SetSoapFault( STR0010, "Usuario sem acesso ao modulo do PMS" ) //"LOGIN INVALIDO"
					Endif
					
					If lRetorno
						DbSelectArea( "AI3" )
						DbSetOrder( 2 )

						If MsSeek( xFilial( "AI3" ) + "PMS000000" )
							PrtIniUser( AI3->AI3_CODUSU, Self:UserPCode, ::UserLogin, ::UserPassword )

							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Inializa as variaveis publicas para controle de usuario³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							aUser := {	::UserPCode:UserCode		,;
										::UserLogin					,;
										::UserPassword				,;
										::UserPCode:UserName		,;
										::UserPCode:UserRoles		,;
										::UserPCode:UserWS			,;
										::UserPCode:UserSuper		,;
										{},;
										AI3->AI3_USRSIS }

							For nX := 1 To Len( ::UserPCode:UserEntiries )
								AAdd( aUser[8], {	::UserPCode:UserEntiries[nX]:Entiry		,;
													::UserPCode:UserEntiries[nX]:ID_Entiry	,;
													::UserPCode:UserEntiries[nX]:Name		,;
													::UserPCode:UserEntiries[nX]:NickName	,;
													::UserPCode:UserEntiries[nX]:FederalID	,;
													::UserPCode:UserEntiries[nX]:Skin } )
							Next nX
					
							PutGlbVars( "c" + AI3->AI3_CODUSU, aUser )
					
							lRetorno := .T.
						Else
							lRetorno := .F.
							
							SetSoapFault( STR0010, "Favor cadastrar um usuario com login PMS000000 no Portal, pelo menu do faturamento" ) //"LOGIN INVALIDO"
						EndIf
					Endif
				Endif
			Endif
		Else
			lRetorno := .F.

			SetSoapFault( STR0010, STR0012 ) //"LOGIN INVALIDO"###"O usuario informado esta incorreto"
		Endif
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Portal PLS															   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Case ::UserType == "4"
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Area																	   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		DbSelectArea("AI3")
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Validacao do Usuario													   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aRetorno := PLVLDUSRW( ::UserLogin, ::UserPassword ) //{lRet,cCodUsr,cMsg,cCodAce,cEMail,aRet,nIndDat,cTipCar,cBiomet,cModBio,nTp,,lTret}
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		//³Qual o tipo do portal
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
	  	nTp := Iif( Len(aRetorno) > 10, aRetorno[11], nTp )
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Retorno																   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If aRetorno[1] 
			AI3->(DbSetOrder(1)) //AI3_FILIAL+AI3_CODUSU
			If AI3->(MsSeek(xFilial("AI3")+aRetorno[4])	)		
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³PrtIniUser															   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				PrtIniUser(aRetorno[4],Self:USERPCODE)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Atualiza o nome do login pls											   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				::USERPCODE:USERLOGIN		:= ::UserLogin
				::USERPCODE:USERPASSWORD	:= ::UserPassword
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Inializa as variaveis publicas para controle de usuario                 ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				aUser := {	::USERPCODE:USERCODE,;
							::USERPCODE:USERLOGIN,;
							::USERPCODE:USERPASSWORD,;
							::USERPCODE:USERNAME,;
							::USERPCODE:USERROLES,;
							::USERPCODE:USERWS,;
							::USERPCODE:USERSUPER,;
							{},;
							AI3->AI3_USRSIS}
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³For na posicao 8														   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				For nX := 1 To Len(::USERPCODE:USERENTIRIES)
					AaDd(aUser[8],{	::USERPCODE:USERENTIRIES[nX]:ENTIRY,;
									::USERPCODE:USERENTIRIES[nX]:ID_ENTIRY,;
									::USERPCODE:USERENTIRIES[nX]:NAME,;
					   				::USERPCODE:USERENTIRIES[nX]:NICKNAME,;
					   				::USERPCODE:USERENTIRIES[nX]:FederalID,;
									::UserPCode:UserEntiries[nX]:Skin})
				Next nX
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³informacao para o pls							   					   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				::USERPCODE:USERLOGPLS 					:= WsClassNew( "LoginView" )
				::USERPCODE:USERLOGPLS:UserLoginCode 	:= aRetorno[2]                 
				::USERPCODE:USERLOGPLS:UserEMail 		:= aRetorno[5]
				::USERPCODE:USERLOGPLS:IntDat	 		:= aRetorno[7]
				::USERPCODE:USERLOGPLS:TipCar	 		:= aRetorno[8]
				::USERPCODE:USERLOGPLS:Biometria 		:= aRetorno[9]
				::USERPCODE:USERLOGPLS:BiometriaCad 	:= aRetorno[14]
				::USERPCODE:USERLOGPLS:ModBio 			:= aRetorno[10]
				::USERPCODE:USERLOGPLS:TpPortal			:= nTp
				::USERPCODE:USERLOGPLS:DataServer		:= dDataBase 
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Atalhos															   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If Len(aRetorno) > 11
				
	              If Len(aRetorno[12]) > 0
	
	              	::USERPCODE:USERLOGPLS:LISTOFACS := {}
	              
	              	For nI := 1 To Len( aRetorno[12] ) 
	              	
	              	     Aadd( ::USERPCODE:USERLOGPLS:LISTOFACS, WsClassNew( "SAtalhos" ) )
	              	     ::USERPCODE:USERLOGPLS:LISTOFACS[nI]:CodMnu		:= AllTrim(aRetorno[12,nI,1])
						     ::USERPCODE:USERLOGPLS:LISTOFACS[nI]:Descri		:= AllTrim(aRetorno[12,nI,2])
						     ::USERPCODE:USERLOGPLS:LISTOFACS[nI]:Imagem   	:= AllTrim(aRetorno[12,nI,3])
						     ::USERPCODE:USERLOGPLS:LISTOFACS[nI]:WebSrv   	:= AllTrim(aRetorno[12,nI,4])
						     ::USERPCODE:USERLOGPLS:LISTOFACS[nI]:Rotina   	:= AllTrim(aRetorno[12,nI,5])
						                  
	              	Next nI
	              
	              EndIf
	            
	            Endif  
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Dados da Rda															   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If Len(aRetorno[6]) > 0

					Do Case
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
						//³Portal do Prestador
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
						Case nTp == 1
				
							::USERPCODE:USERLOGPLS:LISTOFRDA := {}                                 
							
							For nI := 1 To Len( aRetorno[6] )
							
								AaDd( ::USERPCODE:USERLOGPLS:LISTOFRDA, WsClassNew( "RDAView" ) )
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:Code		:= aRetorno[6,nI,1]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:Name		:= aRetorno[6,nI,2]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:RegAtend	:= aRetorno[6,nI,3]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:TpPrest	:= aRetorno[6,nI,4]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:CnpfCpf	:= aRetorno[6,nI,5]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:Cnes		:= aRetorno[6,nI,6]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:TpLograd	:= aRetorno[6,nI,7]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:Address	:= aRetorno[6,nI,8]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:Numero		:= aRetorno[6,nI,9]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:Complen	:= aRetorno[6,nI,10]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:District	:= aRetorno[6,nI,11]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:Zone		:= aRetorno[6,nI,12]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:State		:= aRetorno[6,nI,13]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:IBGE		:= aRetorno[6,nI,14]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:Cep		:= aRetorno[6,nI,15]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:RegAns		:= aRetorno[6,nI,16]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:SigCr		:= aRetorno[6,nI,18]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:CodCr		:= aRetorno[6,nI,19]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:EstCr		:= aRetorno[6,nI,20]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:TipPE		:= aRetorno[6,nI,21]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:CodBB0		:= aRetorno[6,nI,22]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:CodOpe		:= aRetorno[6,nI,23]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:CodLoc		:= aRetorno[6,nI,24]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:DesLoc		:= aRetorno[6,nI,25]
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:CarSol		:= aRetorno[6,nI,28]
								
								If Len(aRetorno[6,nI]) >=29
									::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:TissVer	:= aRetorno[6,nI,29]
								EndIf
								If Len(aRetorno[6,nI]) >=30
									::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:RdaRecno	:= aRetorno[6,nI,30]
								EndIf
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³Matriz Especialidades												   ³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:MEspRda := {}
								For nY := 1 To Len( aRetorno[6,nI,26] )
									AaDd( ::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:MEspRda, WsClassNew( "EspRda" ) )
									::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:MEspRda[nY]:CodEsp	:= aRetorno[6,nI,26,nY,1]
									::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:MEspRda[nY]:DesEsp 	:= aRetorno[6,nI,26,nY,2]
									::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:MEspRda[nY]:CodCBOS	:= aRetorno[6,nI,26,nY,3]
									::USERPCODE:USERLOGPLS:LISTOFRDA[nI]:MEspRda[nY]:DesCBOS	:= aRetorno[6,nI,26,nY,4]
								Next nY          
							Next nI
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
						//³Portal da Empresa/Familia
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
						Case nTp == 2 .Or. nTp == 3

							aRetOpe := aRetorno[6]
							
							::USERPCODE:USERLOGPLS:LISTOFOPE := {}
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
							//³Operadoras
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
							For nI := 1 To Len( aRetOpe )

								AaDd( ::USERPCODE:USERLOGPLS:LISTOFOPE, WsClassNew( "SOperadora" ) )

								aRetEmp := aRetOpe[nI,1]
								
								::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:Code 		 := aRetOpe[nI,2]
								::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:Description:= aRetOpe[nI,3]
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
								//³Empresas
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
								::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA := {}
								For nY := 1 To Len( aRetEmp )
									
									AaDd( ::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA , WsClassNew( "SEmpresa" ) )
									
									aRetCon := aRetEmp[nY,1]
									::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:Code 		 := aRetEmp[nY,2]
									::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:Description:= aRetEmp[nY,3]
									//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
									//³Contrato
									//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
									::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO := {}
									For nX := 1 To Len( aRetCon )
										
										AaDd( ::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO , WsClassNew( "SContrato" ) )
										
										aRetSub := aRetCon[nX,1]
										::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:Code 		:= aRetCon[nX,2]
										::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:Description 	:= aRetCon[nX,3]   
										::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:TipCon		:= aRetCon[nX,4]   
										::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:NumCon		:= aRetCon[nX,5]   
										::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:VerCon		:= aRetCon[nX,6]   
										::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:NomCon		:= aRetCon[nX,7]   
										::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:DatCon		:= aRetCon[nX,8]   
										//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
										//³Sub-Contrato
										//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
										::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO := {}
										For nZ := 1 To Len( aRetSub )
											
											AaDd( ::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO , WsClassNew( "SSubContrato" ) )

											aRetBen := aRetSub[nZ,1]	
											::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:Code 		:= aRetSub[nZ,2]
											::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:Description := aRetSub[nZ,3]
											::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:SubCon		:= aRetSub[nZ,4]
											::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:VerSub		:= aRetSub[nZ,5]
											::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:NomSub		:= aRetSub[nZ,6]
											::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:DtVSub		:= aRetSub[nZ,7]
											//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
											//³Familia
											//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
											::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA := {}
											For nW := 1 To Len( aRetBen )
												AaDd( ::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA , WsClassNew( "SFamilia" ) )
											
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:Code			:= aRetBen[nW,1]
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:Description		:= aRetBen[nW,2]
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:Benefi			:= aRetBen[nW,1]
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:NomBen			:= aRetBen[nW,2]

												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:Familia			:= aRetBen[nW,3]
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:DatNas			:= aRetBen[nW,4]
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:Idade 			:= aRetBen[nW,5]
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:Sexo  			:= aRetBen[nW,6]
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:TipUsu			:= aRetBen[nW,7]
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:DesUsu			:= aRetBen[nW,8]
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:EstCiv			:= aRetBen[nW,9]
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:Graupa			:= aRetBen[nW,10]
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:DatInc			:= aRetBen[nW,11]
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:CodPla			:= aRetBen[nW,12]
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:DesPla			:= aRetBen[nW,13]
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:Verpla			:= aRetBen[nW,14]
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:DatCar			:= aRetBen[nW,15]
												::USERPCODE:USERLOGPLS:LISTOFOPE[nI]:EMPRESA[nY]:CONTRATO[nX]:SUBCONTRATO[nZ]:FAMILIA[nW]:ResFam			:= aRetBen[nW,16]
											Next
                                        Next
									Next
                                Next
							Next
							
						EndCase
				EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³PutGlbVars															   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				PutGlbVars("c"+AI3->AI3_CODUSU,aUser)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Retorno																   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				lRetorno := .T.
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Grava log de Acesso													   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			    _nH  := PLSAbreSem("PLUPTENC.SMF")
			    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			    //³ Sequencial																 ³
			    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			    cSeq := PLBX1NEW()
			    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			    //³ Log de Acesso															 ³
			    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			    BX1->(RecLock("BX1",.T.))
				   BX1->BX1_FILIAL   := xFilial("BX1")
				   BX1->BX1_SEQUEN   := cSeq
				   BX1->BX1_ALIAS    := "BSW"
				   BX1->BX1_RECNO    := StrZero(Recno(),Len(BX1->BX1_RECNO))
		           BX1->BX1_TIPO     := "W"
				   BX1->BX1_USUARI   := aRetorno[2]
				   BX1->BX1_DATA     := Date()
				   BX1->BX1_HORA     := Time()
				   BX1->BX1_ESTTRB   := GetComputerName()
				   BX1->BX1_ROTINA := 'PRTLOGIN'
				   BX1->BX1_CODUSR		:= aRetorno[2]
				   BX1->BX1_QTACES		:= 0
				   if BX1->(FieldPos("BX1_IPACES")) > 0 .And. Valtype(::USERIPADDR) <> 'U'
						BX1->BX1_IPACES := Alltrim(::USERIPADDR)	
				   endIf
			   BX1->(MsUnLock())        
			
		       PLSFechaSem(_nH,"PLUPTENC.SMF")
			    
			Else
			    IF len(aRetorno) > 12 .And. aRetorno[13]
					If cIdiom == 'es' 
						cMsg := "Intentos de ingreso excedieron el límite permitido , por favor intente de nuevo en 5 minutos ..."
						cMsg2:= "ACCESO BLOQUEADO TEMPORALMENTE" 
					ElseIf cIdiom == 'en' 
						cMsg := "Login attempts exceeded the allowable limit, please try again in 5 minutes..."
						cMsg2 := "LOGIN TEMPORARILY LOCKED"
					Else
						cMsg := "Tentativa de login ultrapassou o limite permitido, favor tentar após 5 minutos..."
						cMsg2 := "LOGIN TEMPORARIAMENTE BLOQUEADO"
					Endif
					SetSoapFault(cMsg2,cMsg)
					lRetorno := .F.	 			
				Else	
					SetSoapFault(STR0010,aRetorno[3]) //"LOGIN INVALIDO"###"O usuario informado esta incorreto"
				lRetorno := .F.
			EndIf
			EndIf
		Else
		    IF len(aRetorno) > 12 .And. aRetorno[13]
				If cIdiom == 'es' 
					cMsg := "Intentos de ingreso excedieron el límite permitido , por favor intente de nuevo en 5 minutos ..."
					cMsg2:= "ACCESO BLOQUEADO TEMPORALMENTE" 
				ElseIf cIdiom == 'en' 
					cMsg := "Login attempts exceeded the allowable limit, please try again in 5 minutes..."
					cMsg2 := "LOGIN TEMPORARILY LOCKED"
				Else
					cMsg := "Tentativa de login ultrapassou o limite permitido, favor tentar após 5 minutos..."
					cMsg2 := "LOGIN TEMPORARIAMENTE BLOQUEADO"
				Endif
				SetSoapFault(cMsg2,cMsg)
				lRetorno := .F.			
		Else
			SetSoapFault(STR0010,aRetorno[3]) //"LOGIN INVALIDO"###"O usuario informado esta incorreto"
			lRetorno := .F.
		EndIf			
		EndIf			
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
	//³Tratamento generico
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
	OtherWise
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		//³PORGENER
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		If ExistBlock("GENVLD01")
			aRet 		:= ExecBlock("GENVLD01",.F.,.F.,{::USERLOGIN,::USERPASSWORD,::USERTYPE,::PORTALACCESS} )
			lRetorno 	:= aRet[1]
			cMsg		:= aRet[2]
			cCodAce		:= aRet[3]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
			//³Monta Sessao
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
			If lRetorno
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
				//³PrtIniUser
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
				PrtIniUser(cCodAce,Self:USERPCODE)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
				//³PrtIniUser
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
				If ExistBlock("GENVUSER")
					aUser := ExecBlock("GENVUSER",.F.,.F.,{Self:USERPCODE,aRet[4]} )
				Else
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Inializa as variaveis publicas para controle de usuario                 ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					aUser := {	::USERPCODE:USERCODE,;
								::USERPCODE:USERLOGIN,;
								::USERPCODE:USERPASSWORD,;
								::USERPCODE:USERNAME,;
								::USERPCODE:USERROLES,;
								::USERPCODE:USERWS,;
								::USERPCODE:USERSUPER,;
								{},;
								AI3->AI3_USRSIS}
					
					For nX := 1 To Len(::USERPCODE:USERENTIRIES)
						AaDd(aUser[8],{::USERPCODE:USERENTIRIES[nX]:ENTIRY,;
										::USERPCODE:USERENTIRIES[nX]:ID_ENTIRY,;
										::USERPCODE:USERENTIRIES[nX]:NAME,;
										::USERPCODE:USERENTIRIES[nX]:NICKNAME,;
										::USERPCODE:USERENTIRIES[nX]:FederalID,;
										::USERPCODE:USERENTIRIES[nX]:Skin})
					Next nX
				EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
				//³PutGlbVars
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
				PutGlbVars("c"+AI3->AI3_CODUSU,aUser)
			Else
				SetSoapFault(STR0010,cMsg) //"LOGIN INVALIDO"
			EndIf
		EndIf   
EndCase


RestArea( aArea )

Return lRetorno
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PrtLogout ³Autor  ³ Eduardo Riera         ³ Data ³11.03.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Metodo de Logout para os portais                             ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo do Usuario                                     ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica que o metodo foi avaliado com sucesso          ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                             ³±±
±±³          ³                                                             ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ CRM/Materiais/Portais                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
WSMETHOD PRTLOGOUT WSRECEIVE USERCODE WSSEND OK WSSERVICE UserPortal

Local aArea   := GetArea()
Local cCodigo := ::USERCODE

dbSelectArea("AI3")
dbSetOrder(1)
If MsSeek(xFilial("AI3")+cCodigo)

	PutGlbVars("c"+cCodigo,Nil)
	::OK := 1
Else
	::OK := 0
EndIf
RestArea(aArea)
Return(.T.)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PrtGetGrou³Autor  ³ Eduardo Riera         ³ Data ³12.03.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Metodo de recuperacao dos grupos de usuario vinculados ao    ³±±
±±³          ³usuario administrador                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo do usuario                                     ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica que o metodo foi avaliado com sucesso          ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Este metodo retorna os grupos de usuario vinculados a ao usu-³±±
±±³          ³ario administrador                                           ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ CRM/Materiais/Portais                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

WSMETHOD PrtGetGroup WSRECEIVE USERCODE WSSEND USERSGROUP WSSERVICE UserPortal

Local lRetorno  := .F.
Local aUser     := {}
Local nX        := 0
Local cAliasAI3 := "AI3"
Local cCodigo   := ::USERCODE
Local oObj      := Nil
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se eh o administrador                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If GetGlbVars("c"+cCodigo,@aUser)
	If !Empty(aUser) .And. aUser[5]==1
		lRetorno := .T.
		dbSelectArea("AI3")
		dbSetOrder(3)
		MsSeek(xFilial("AI3")+cCodigo)
		While !Eof() .And. xFilial("AI3") == AI3->AI3_FILIAL .And.;
				cCodigo == AI3->AI3_SUPER
			If (cAliasAI3)->AI3_ADMIN <> '1'
				oObj := WSClassNew("LoginUserStruct")
				aadd(::USERSGROUP,oObj)
				PrtIniUser(AI3->AI3_CODUSU,oObj)
				nX++
				::USERSGROUP[nX]:USERCODE     := oObj:USERCODE
				::USERSGROUP[nX]:USERGROUP    := oObj:USERGROUP
				::USERSGROUP[nX]:USERLOGIN    := oObj:USERLOGIN
				::USERSGROUP[nX]:USERPASSWORD := oObj:USERPASSWORD
				::USERSGROUP[nX]:USERWS       := oObj:USERWS
				::USERSGROUP[nX]:USERNAME     := oObj:USERNAME
				::USERSGROUP[nX]:USERROLES    := oObj:USERROLES
				::USERSGROUP[nX]:USERACCESSES  := oObj:USERACCESSES
				::USERSGROUP[nX]:USERENTIRIES := oObj:USERENTIRIES
				::USERSGROUP[nX]:USERSUPER    := oObj:USERSUPER
			EndIf
			dbSelectArea("AI3")
			dbSkip()
		EndDo
	Else
		SetSoapFault("PRTGETGROUP",STR0013)	 //"Somente um Administrador pode realizar esta operacao"
		lRetorno := .F.
	EndIf		
Else
	SetSoapFault("PRTGETGROUP",STR0014) //"Login nao efetuado"
	lRetorno := .F.
EndIf
Return(lRetorno)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PrtPutUser³Autor  ³ Eduardo Riera         ³ Data ³12.03.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Metodo de atualizacao dos dados do usuario                   ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo do usuario                                     ³±±
±±³          ³ExpO2: Estrutura de usuario                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica que o metodo foi avaliado com sucesso          ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Este metodo possibilita a inclusa/alterao/exclusao de um     ³±±
±±³          ³usuario do portal                                            ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ CRM/Materiais/Portais                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
WSMETHOD PrtPutUser WSRECEIVE USERCODE,USERPCODE WSSEND OK WSSERVICE UserPortal

Local aArea    := GetArea()
Local aRegAI4  := {}
Local aRegAI5  := {}
Local aRegAI6  := {}
Local aUser    := {}
Local lRetorno := .T.
Local nTpOper  := 0
Local nX       := 0
Local cCodigo  := AllTrim(::USERCODE)
#IFDEF TOP
	Local cCursor  := "PrtPutUser"
#ENDIF

dbSelectArea("AI1")
dbSelectArea("AI2")
dbSelectArea("AI3")
dbSelectArea("AI4")
dbSelectArea("AI5")
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se eh o administrador                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
::OK := 0
If GetGlbVars("c"+cCodigo,@aUser)
	If !Empty(aUser) .And. aUser[5] == 1 .And. PadR(aUser[1],Len(AI3->AI3_CODUSU)) <> PadR(::USERPCODE:USERCODE,Len(AI3->AI3_CODUSU))
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Verifica qual a operacao                                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		::USERPCODE:USERCODE := PadR(::USERPCODE:USERCODE,Len(AI3->AI3_CODUSU))
		If !Empty(::USERPCODE:USERCODE)
			dbSelectArea("AI3")
			dbSetOrder(1)
			If MsSeek(xFilial("AI3")+::USERPCODE:USERCODE)
				nTpOper := 2
			Else
				nTpOper := 1
			EndIf
		Else
			nTpOper := 1
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Verifica se os dados passados estao corretos                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		::USERPCODE:USERLOGIN := PadR(::USERPCODE:USERLOGIN,Len(AI3->AI3_LOGIN))
		dbSelectArea("AI3")
		dbSetOrder(2)
		If nTpOper == 1 .And. MsSeek(xFilial("AI3")+::USERPCODE:USERLOGIN) //.And. !Empty(::USERPCODE:USERCODE)
			SetSoapFault("PRTPUTUSER",STR0015) //"Ja existe um usuario com este codigo de login."
			lRetorno := .F.
		EndIf
		If lRetorno
			If Empty(::USERPCODE:USERPASSWORD)
				SetSoapFault("PRTPUTUSER",STR0016) //"Senha nao informada"
				lRetorno := .F.
			EndIf
		EndIf
		If lRetorno
			If Empty(::USERPCODE:USERNAME)
				SetSoapFault("PRTPUTUSER",STR0017) //"Nome do usuario nao informado"
				lRetorno := .F.
			EndIf
		EndIf
		If lRetorno
			If !(::USERPCODE:USERROLES == 2 .Or. ::USERPCODE:USERROLES == 3)
				SetSoapFault("PRTPUTUSER",STR0018) //"Nao e possivel efetuar um cadastramento de um adminstrador pelo portal"
				lRetorno := .F.
			EndIf
		EndIf
		::USERPCODE:USERSUPER := PadR(::USERPCODE:USERSUPER,Len(AI3->AI3_SUPER))
		If lRetorno
			If ::USERPCODE:USERSUPER == aUser[1]
				SetSoapFault("PRTPUTUSER",STR0019) //"Codigo do superior nao deve ser informado"
				lRetorno := .F.
			EndIf
		EndIf
		If lRetorno
			For nX := 1 To Len(::USERPCODE:USERACCESSES)
				If !::USERPCODE:USERACcESSES[nX]:WEBSRV $ aUser[6]
					SetSoapFault("PRTPUTUSER",STR0020) //"Somente os direitos contidos no Administrador podem ser utilizados"
					lRetorno := .F.
					Exit
				EndIf
			Next nX
		EndIf
		If lRetorno
			For nX := 1 To Len(::USERPCODE:USERENTIRIES)
				If aScan(aUser[8],{|x| AllTrim(x[2]) == AllTrim(::USERPCODE:USERENTIRIES[nX]:ID_ENTIRY)})==0
					SetSoapFault("PRTPUTUSER",STR0021) //"Somente as empresas contidos no Administrador podem ser utilizadas"
					lRetorno := .F.
					Exit
				EndIf
			Next nX
		EndIf
		If lRetorno
		
		EndIf
		If lRetorno
			Begin Transaction
				If nTpOper == 1 .Or. SimpleLock("AI3")					
					RecLock("AI3",nTpOper==1)
					AI3->AI3_FILIAL := xFilial("AI3")
					AI3->AI3_CODUSU := IIf(nTpOper==1,GetSxeNum("AI3","AI3_CODUSU"),AI3->AI3_CODUSU)
					AI3->AI3_LOGIN  := ::USERPCODE:USERLOGIN
					AI3->AI3_PSW    := ::USERPCODE:USERPASSWORD
					AI3->AI3_NOME   := ::USERPCODE:USERNAME
					AI3->AI3_ADMIN  := Str(::USERPCODE:USERROLES,1)
					AI3->AI3_SUPER  := aUser[1]
					AI3->AI3_GRUPO  := ::USERPCODE:USERGROUP
					AI3->AI3_SKIN   := ::USERPCODE:USERSKIN       
					AI3->AI3_EMAIL   := ::USERPCODE:USEREMAIL
					If nTpOper <> 1
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³Guarda os registro para reaproveita-los                       ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						#IFDEF TOP
							cQuery := "SELECT R_E_C_N_O_ RECNO "
							cQuery += "FROM "+RetSqlName("AI4")+" AI4 "
							cQuery += "WHERE AI4.AI4_FILIAL='"+xFilial("AI4")+"' AND "
							cQuery += "AI4.AI4_CODUSU='"+AI3->AI3_CODUSU+"' AND "
							cQuery += "AI4.D_E_L_E_T_=' ' "

							cQuery := ChangeQuery(cQuery)

							dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cCursor)
							While !Eof()
								aadd(aRegAI4,(cCursor)->RECNO)
								dbSelectArea(cCursor)
								dbSkip()
							EndDo		
							dbSelectArea(cCursor)
							dbCloseArea()
							dbSelectArea("AI3")
						#ELSE
							dbSelectArea("AI4")
							dbSetOrder(1)
							MsSeek(xFilial("AI4")+AI3->AI3_CODUSU)
							While ( !Eof() .And. xFilial("AI4") == AI4->AI4_FILIAL .And. M->AI3_CODUSU == AI4->AI4_CODUSU )
								aadd(aRegAI4,RecNo())
								dbSelectArea("AI4")
								dbSkip()
							EndDo
						#ENDIF
						#IFDEF TOP
							cQuery := "SELECT R_E_C_N_O_ RECNO "
							cQuery += "FROM "+RetSqlName("AI5")+" AI5 "
							cQuery += "WHERE AI5.AI5_FILIAL='"+xFilial("AI5")+"' AND "
							cQuery += "AI5.AI5_CODUSU='"+AI3->AI3_CODUSU+"' AND "
							cQuery += "AI5.D_E_L_E_T_=' ' "

							cQuery := ChangeQuery(cQuery)

							dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cCursor)
							While !Eof()
								aadd(aRegAI5,(cCursor)->RECNO)
								dbSelectArea(cCursor)
								dbSkip()
							EndDo		
							dbSelectArea(cCursor)
							dbCloseArea()
							dbSelectArea("AI3")
						#ELSE
							dbSelectArea("AI5")
							dbSetOrder(1)
							MsSeek(xFilial("AI5")+M->AI3_CODUSU)
							While ( !Eof() .And. xFilial("AI5") == AI5->AI5_FILIAL .And. M->AI3_CODUSU == AI5->AI5_CODUSU )
								aadd(aRegAI5,RecNo())
								dbSelectArea("AI5")
								dbSkip()
							EndDo
						#ENDIF
						#IFDEF TOP
							cQuery := "SELECT R_E_C_N_O_ RECNO "
							cQuery += "FROM "+RetSqlName("AI6")+" AI6 "
							cQuery += "WHERE AI6.AI6_FILIAL='"+xFilial("AI6")+"' AND "
							cQuery += "AI6.AI6_CODUSU='"+AI3->AI3_CODUSU+"' AND "
							cQuery += "AI6.D_E_L_E_T_=' ' "

							cQuery := ChangeQuery(cQuery)

							dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cCursor)
							While !Eof()
								aadd(aRegAI6,(cCursor)->RECNO)
								dbSelectArea(cCursor)
								dbSkip()
							EndDo		
							dbSelectArea(cCursor)
							dbCloseArea()
							dbSelectArea("AI3")
						#ELSE
							dbSelectArea("AI6")
							dbSetOrder(1)
							MsSeek(xFilial("AI6")+M->AI3_CODUSU)
							While ( !Eof() .And. xFilial("AI6") == AI6->AI6_FILIAL .And. M->AI3_CODUSU == AI6->AI6_CODUSU )
								aadd(aRegAI6,RecNo())
								dbSelectArea("AI6")
								dbSkip()
							EndDo
						#ENDIF	
					EndIf   
					
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Deleta as permissões antigas, para evitar duplicidade de registros³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ  
		   	 		For nX := 1 To Len(aRegAI4) 
				 		AI4->(MsGoto(aRegAI4[nX]))
				 		RecLock("AI4",.F.)
				 		dbDelete()                                 
		 	 		Next nX	                                       
					
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Deleta as permissões antigas, para evitar duplicidade de registros³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ  
		 	   		For nX := 1 To Len(aRegAI5) 
		 	 			AI5->(MsGoto(aRegAI5[nX]))
		 	  			RecLock("AI5",.F.)
		 	 			dbDelete()
		  	 	 	Next nX	   
					
					
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Atualiza as tabelas de entidades                              ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					For nX := 1 To Len(::USERPCODE:USERENTIRIES)
						If ::USERPCODE:USERENTIRIES[nX]:ENTIRY == "SA1"
							If nX > Len(aRegAI4)
								RecLock("AI4",.T.)
							Else
								AI4->(MsGoto(aRegAI4[nX]))
								RecLock("AI4",.T.)
								aRegAI4[nX] := Nil
							EndIf
							AI4->AI4_FILIAL := xFilial("AI4")
							AI4->AI4_CODUSU := AI3->AI3_CODUSU
							AI4->AI4_CODCLI := ::USERPCODE:USERENTIRIES[nX]:ID_ENTIRY
							AI4->AI4_LOJCLI := SubStr(::USERPCODE:USERENTIRIES[nX]:ID_ENTIRY,Len(AI4->AI4_CODCLI)+1)
							AI4->AI4_SKIN   := ::USERPCODE:USERENTIRIES[nX]:Skin
						Else
							If nX > Len(aRegAI5)
								RecLock("AI5",.T.)
							Else
								AI5->(MsGoto(aRegAI5[nX]))
								RecLock("AI5",.T.)
								aRegAI5[nX] := Nil
							EndIf
							AI5->AI5_FILIAL := xFilial("AI5")
							AI5->AI5_CODUSU := AI3->AI3_CODUSU
							AI5->AI5_CODFOR := ::USERPCODE:USERENTIRIES[nX]:ID_ENTIRY
							AI5->AI5_LOJFOR := SubStr(::USERPCODE:USERENTIRIES[nX]:ID_ENTIRY,Len(AI5->AI5_CODFOR)+1)
							AI5->AI5_SKIN   := ::USERPCODE:USERENTIRIES[nX]:Skin							
						EndIf
					Next nX  
					
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Deleta as permissões antigas, para evitar duplicidade de registros³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ  
					For nX := 1 To Len(aRegAI6) 
						AI6->(MsGoto(aRegAI6[nX]))
						RecLock("AI6",.F.)
						dbDelete()
					Next nX					
					
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Atualiza a tabela de acessos                                  ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ  					 
					For nX := 1 To Len(::USERPCODE:USERACCESSES)  
						If nX > Len(aRegAI6)   
							RecLock("AI6",.T.)
						Else      
							AI6->(MsGoto(aRegAI6[nX]))
							RecLock("AI6",.T.)
							aRegAI6[nX] := Nil
						EndIf
						AI6->AI6_FILIAL := xFilial("AI6")
						AI6->AI6_CODUSU := AI3->AI3_CODUSU
						AI6->AI6_WEBSRV := ::USERPCODE:USERACCESSES[nX]:WEBSRV
					Next nX	
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Exclui os itens nao reaproveitados das tabelas                ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					For nX := 1 To Len(aRegAI4)
						If aRegAI4[nX] <> Nil
							AI4->(MsGoto(aRegAI4[nX]))
							RecLock("AI4",.F.)
							dbDelete()
						EndIf
					Next nX
					For nX := 1 To Len(aRegAI5)
						If aRegAI5[nX] <> Nil
							AI5->(MsGoto(aRegAI5[nX]))
							RecLock("AI5",.F.)
							dbDelete()
						EndIf
					Next nX
					For nX := 1 To Len(aRegAI6)
						If aRegAI6[nX] <> Nil
							AI6->(MsGoto(aRegAI6[nX]))
							RecLock("AI6",.F.)
							dbDelete()
						EndIf
					Next nX
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Verifica se a exclusao deve ser efetuada                      ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If nTpOper == 2
						dbSelectArea("AI4")
						dbSetOrder(1)
						dbSelectArea("AI5")
						dbSetOrder(1)
						dbSelectArea("AI6")
						dbSetOrder(1)
						If !((AI4->(MsSeek(xFilial("AI4")+AI3->AI3_CODUSU)) .Or.;
								AI5->(MsSeek(xFilial("AI5")+AI3->AI3_CODUSU))) .And.;
								AI6->(MsSeek(xFilial("AI6")+AI3->AI3_CODUSU)))

							#IFDEF TOP
							
								cQuery := "DELETE "
								cQuery += "FROM "+RetSqlName("AI4")+" AI4 "
								cQuery += "WHERE AI4.AI4_FILIAL='"+xFilial("AI4")+"' AND "
								cQuery += "AI4.AI4_CODUSU='"+AI3->AI3_CODUSU+"' AND "
								cQuery += "AI4.D_E_L_E_T_=' ' "

								TcSqlExec(cQuery)

							#ELSE
								dbSelectArea("AI4")
								dbSetOrder(1)
								MsSeek(xFilial("AI4")+AI3->AI3_CODUSU)
								While ( !Eof() .And. xFilial("AI4") == AI4->AI4_FILIAL .And. M->AI3_CODUSU == AI4->AI4_CODUSU )
									RecLock("AI4")
									dbDelete()

									dbSelectArea("AI4")
									dbSkip()
								EndDo
							#ENDIF
							#IFDEF TOP
								cQuery := "DELETE "
								cQuery += "FROM "+RetSqlName("AI5")+" AI5 "
								cQuery += "WHERE AI5.AI5_FILIAL='"+xFilial("AI5")+"' AND "
								cQuery += "AI5.AI5_CODUSU='"+AI3->AI3_CODUSU+"' AND "
								cQuery += "AI5.D_E_L_E_T_=' ' "

								TcSqlExec(cQuery)

							#ELSE
								dbSelectArea("AI5")
								dbSetOrder(1)
								MsSeek(xFilial("AI5")+M->AI3_CODUSU)
								While ( !Eof() .And. xFilial("AI5") == AI5->AI5_FILIAL .And. M->AI3_CODUSU == AI5->AI5_CODUSU )
									RecLock("AI5")
									dbDelete()

									dbSelectArea("AI5")
									dbSkip()
								EndDo
							#ENDIF
							#IFDEF TOP
								cQuery := "DELETE "
								cQuery += "FROM "+RetSqlName("AI6")+" AI6 "
								cQuery += "WHERE AI6.AI6_FILIAL='"+xFilial("AI6")+"' AND "
								cQuery += "AI6.AI6_CODUSU='"+AI3->AI3_CODUSU+"' AND "
								cQuery += "AI6.D_E_L_E_T_=' ' "

								TcSqlExec(cQuery)

							#ELSE
								dbSelectArea("AI6")
								dbSetOrder(1)
								MsSeek(xFilial("AI6")+M->AI3_CODUSU)
								While ( !Eof() .And. xFilial("AI6") == AI6->AI6_FILIAL .And. M->AI3_CODUSU == AI6->AI6_CODUSU )
									RecLock("AI6")
									dbDelete()

									dbSelectArea("AI6")
									dbSkip()
								EndDo
							#ENDIF
							RecLock("AI3")
							dbDelete()
						EndIf
					EndIf
				EndIf
				While __lSx8
					ConfirmSx8()
				EndDo
				EvalTrigger()
			End Transaction

			::OK := 1

		EndIf
	Else
		SetSoapFault("PRTPUTUSER",STR0022) //"Somente o administrador pode alterar um usuario"
		lRetorno := .F.
	EndIf
Else
	SetSoapFault("PRTPUTUSER","Logon nao efetuado")
	lRetorno := .F.
EndIf
RestArea(aArea)
Return(lRetorno)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PrtPswUser³Autor  ³ Eduardo Riera         ³ Data ³12.03.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Metodo de troca da senha do usuario                          ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo do usuario                                     ³±±
±±³          ³ExpN2: Senha do usuario                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica que o metodo foi avaliado com sucesso          ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Este metodo atualiza a senha do usuario                      ³±±
±±³          ³                                                             ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ CRM/Materiais/Portais                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
WSMETHOD PrtPswUser WSRECEIVE USERCODE,USEROLDPASSWORD,USERPASSWORD,UserType WSSEND OK WSSERVICE UserPortal
Local aArea	    := GetArea()
Local aUser  	:= {}
Local lRetAtivo	:= .F.
Local lRetorno 	:= .T.
Local cCodigo 	:= ::USERCODE
LOCAL lRetRD0	:= .F.
Local aRetFun	:= {}
Local cSenha := ""
Local cUsrPass := ::USERPASSWORD
Local cUsrOldPass := ::USEROLDPASSWORD
Local oResult := nil
DEFAULT ::UserType := "1"

::OK := 0
If ::UserType=="1"
	GetGlbVars("c"+cCodigo,@aUser)
	If !Empty(aUser) .And. aUser[1] == AllTrim(::USERCODE)
		Begin Transaction
			dbSelectArea("AI3")
			dbSetOrder(1)
			If MsSeek(xFilial("AI3")+aUser[1]) .And. AllTrim(::UserOldPassWord)==AllTrim(AI3->AI3_PSW)
				If RecLock("AI3")
					If !Empty(::USERPASSWORD)
						AI3->AI3_PSW := ::USERPASSWORD
						::OK := 1
					Else
						SetSoapFault("PRTPUTUSER",STR0023) //"A senha nao foi informada"
						lRetorno := .F.
					EndIf
				Else
					lRetorno := .F.
					SetSoapFault("PRTPUTUSER",STR0024) //"Operacao nao disponivel neste momento"
				EndIf
			Else
				lRetorno := .F.
				SetSoapFault("PRTPUTUSER",STR0025) //"Senha invalida"
			EndIf
		End Transaction
	Else
		lRetorno := .F.
		SetSoapFault("PRTPUTUSER",STR0026) //"Usuario invalido"
	EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Altera senha do usuarioa do Portal PLS								   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
ElseIf ::UserType == "4"	
	DbSelectArea("BSW")
	DbSetOrder(5)  //BSW_FILIAL + BSW_CODUSR
	If MsSeek(xFilial("BSW")+cCodigo)
		Begin Transaction

			oResult := PLVldPassword(::USERPASSWORD,::USERPASSWORD,BSW->BSW_LOGUSR,::UserCode)

			If !oResult["sucess"]
				SetSoapFault("",oResult["messageErro"])
				lRetorno := .F.
			EndIf

			If Len(BSW->BSW_SENHA) == 64
				cSenha := SHA256(Trim(cUsrPass))
			Else
				cSenha := PLSCRIDEC(1,AllTrim(cUsrPass)) 
			Endif

			If RecLock("BSW")
				If !Empty(cUsrPass)
					BSW->BSW_PRIACE := .F. //Alterando a informação de primeiro acesso para falso.
					BSW->BSW_SENHA := cSenha
					BSW->BSW_DTSEN := Date()
   					BSW->(MsUnlock()) 
					::OK := 1
				Else
					SetSoapFault("",STR0023) //"A senha nao foi informada"
					lRetorno := .F.
				EndIf
			Else
				lRetorno := .F.
				SetSoapFault("",STR0024) //"Operacao nao disponivel neste momento"
			EndIf
		End Transaction
	Else
		lRetorno := .F.
		SetSoapFault("",STR0026) //"Usuario invalido"
	EndIf
Else
	dbSelectArea("RD0")
	//Verifica caso a tentativa de login seja feita pela login unificado(RD0_LOGIN)
 	dbSetOrder(10)           	
	If DbSeek( xFilial("RD0")+AllTrim(::UserCode) )
 		lRetRD0 := .T.
	EndIf

	If !(lRetRD0)
		//Verifica caso a tentativa de login seja feita pela DOCID(RD0_DOCID)
		dbSetOrder(11)           	
		If DbSeek( xFilial("RD0")+AllTrim(::UserCode) )
	 		lRetRD0 := .T.
		EndIf
	EndIf

	If RD0->RD0_MSBLQL == "2"
		lRetAtivo	:= .T.
 	EndIf			

	If !(lRetRD0)
		dbSetOrder(6)

		If MsSeek( xFilial("RD0")+UPPER(AllTrim(::UserCode)) )
	 		//-- No Portal RH, pode haver mais de um participante com o mesmo CPF. 
	 		//-- Incluido tratamento para procurar um participante ativo.	 		
			While RD0->( !Eof() .and. RD0_FILIAL+RD0_CIC == xFilial("RD0")+UPPER(AllTrim(::UserCode)) )
	 			If RD0->RD0_MSBLQL == "2"
		 			lRetRD0 	:= .T.
	 				lRetAtivo	:= .T.
	 				EXIT 
	 		 	EndIf
	 		 	RD0->( dbSkip()	)
			End While		
		EndIf	
	EndIf

	If lRetRD0
		If ::UserType == "22"//Criptografia Portal GCH
			cRestFault := EncodeUTF8( fPwdValid( alltrim(::USERPASSWORD) , 2 ) )
            If !Empty(cRestFault)  
				SetSoapFault("PRTPUTUSER",STR0025) //"Senha invalida"           
               lRetorno := .F.
            EndIf
                
            If lRetorno .And. !fPwdChange( AllTrim(::USERPASSWORD) )
				SetSoapFault("PRTPUTUSER",STR0025) //"Senha invalida"
				lRetorno := .F.
			EndIf
		Else
			Begin Transaction
				If (lRetAtivo) .OR. (SuperGetMV("MV_TCFVREN",.F.,"N") <>  "N")
					If Upper(AllTrim(Embaralha(RD0->RD0_SENHA,1))) == Upper(AllTrim(::USEROLDPASSWORD)) 
						If RecLock("RD0")
							If !Empty(::USERPASSWORD)
								RD0->RD0_SENHA := ::USERPASSWORD
								//Atualiza a senha do SRA
								If	MatParticipant(AllTrim(::UserCode), aRetFun)	
									DbSelectArea("SRA")
									DbSetOrder(1)
									If DbSeek( Alltrim(aRetFun[1][3]+aRetFun[1][1]) ) // Igual ao PWSA00C, utilizo o primeiro registro do array
										If SRA->( RecLock("SRA", .F.) )
											SRA->RA_SENHA := ::USERPASSWORD
										EndIf
									EndIf
								EndIf
								::OK := 1
							Else
								SetSoapFault("PRTPUTUSER",STR0023) //"A senha nao foi informada"
								lRetorno := .F.
							EndIf
						Else
							lRetorno := .F.
							SetSoapFault("PRTPUTUSER",STR0024) //"Operacao nao disponivel neste momento"
						EndIf
					Else
						lRetorno := .F.
						SetSoapFault("PRTPUTUSER",STR0025) //"Senha invalida"
					EndIf
				Else
					lRetorno := .F.
					SetSoapFault("PRTPUTUSER",STR0031) //"Usuario esta Inativo no cadastro de pessoas"			
				EndIf
			End Transaction

		EndIf
	Else
		lRetorno := .F.
		SetSoapFault("PRTPUTUSER",STR0026+" - "+STR0037) //"Usuario invalido - Complete o cadastro do participante informando seu CPF!"
	EndIf
EndIf
RestArea(aArea)
Return(lRetorno)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PrtListPor³Autor  ³ Eduardo Riera         ³ Data ³01.08.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Metodo de exibicao dos portais                               ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                       ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica que o metodo foi avaliado com sucesso          ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Este metodo atualiza a senha do usuario                      ³±±
±±³          ³                                                             ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ CRM/Materiais/Portais                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
WSMETHOD PrtListPortals WSRECEIVE NULLPARAM WSSEND USERLISTPORTAL WSSERVICE UserPortal

Local aArea  := GetArea()
Local lQuery := .F.
Local cAlias := "AI9"
Local nX     := 0 
#IFDEF TOP
Local cQuery := ""
#ENDIF

#IFDEF TOP
	cAlias := "PrtListPortals"
	lQuery := .T.

	cQuery := "SELECT * "
	cQuery += "FROM "+RetSqlName("AI9")+" AI9 "
	cQuery += "WHERE AI9.AI9_FILIAL='"+xFilial("AI9")+"' AND "
	cQuery += "AI9.D_E_L_E_T_=' ' "

	cQuery := ChangeQuery(cQuery)

	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias)	
#ELSE
	dbSelectArea("AI9")
	dbSetOrder(1)
	MsSeek(xFilial("AI9"))
#ENDIF
While !Eof() .And. (cAlias)->AI9_FILIAL=xFilial("AI9")

	nX++
	aadd(::UserListPortal,WsClassNew("GenericStruct"))

	::UserListPorta[nX]:Code        := (cAlias)->AI9_PORTAL
	::UserListPorta[nX]:Description := (cAlias)->AI9_DESCRI

	dbSelectArea(cAlias)
	dbSkip()
EndDo
If lQuery
	dbSelectArea(cAlias)
	dbCloseArea()
	dbSelectArea("AI9")	
EndIf

RestArea(aArea)
Return(.T.)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PrtListMen³Autor  ³ Eduardo Riera         ³ Data ³01.08.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Metodo de exibicao dos menus                                 ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo do Portal                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica que o metodo foi avaliado com sucesso          ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Este metodo atualiza a senha do usuario                      ³±±
±±³          ³                                                             ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ CRM/Materiais/Portais                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Atualizacoes sofridas desde a Construcao Inicial.                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Analista     ³ Data   ³ BOPS ³  Motivo da Alteracao                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Tatiane V. M.³02/04/07³122203³Alterado para respeitar o idioma do am-  ³±±
±±³              ³        ³      ³biente.                                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
WSMETHOD PrtListMenu WSRECEIVE UserPortalCode,UserCode,UserLogin WSSEND UserListMenu WSSERVICE UserPortal
Local aArea    	:= GetArea()
Local aUser    	:= {}
Local lQuery   	:= .F.
Local lRetorno 	:= .T.
Local cAlias   	:= "AI8"
Local cWEBSRV  	:= "''"
Local nX       	:= 0
Local cBSO 	 	:= ""
Local cBAU 	 	:= ""
Local cBC4 	 	:= ""
Local dBloqueio	:=	FsDateConv(dDataBase,"YYYYMMDD")
Local lMenu    	:= .F.
Local lOk		:= .T.
Local cAliasTrb	:= ""
Local oObj 		:= nil
Local cIdiom	:= FWRetIdiom()        //Retorna Idioma Atual
#IFDEF TOP
Local cQuery   	:= ""
Local cSqlMenCus:= ""
Local cMenuCus	:= ""
Local nQtdReg   := 0 
#ENDIF

BSW->(DbSetOrder(1))
BSW->(MsSeek(Xfilial("BSW") + ::UserLogin))

::UserPortalCode := PadR(::UserPortalCode,Len(AI8->AI8_PORTAL))
::UserCode := PadR(::UserCode,Len(AI3->AI3_CODUSU))


GetGlbVars("c"+::UserCode,@aUser)

If ( valType(aUser) <> "A" .or. len(aUser) <= 0 ) .and. (::UserPortalCode == "000008" .or. ::UserPortalCode == "000010")

	BSW->(dbSetOrder(1))
	if BSW->(MSSEEK(xFilial("BSW")+::UserLogin))
	
		AI3->(DbSetOrder(1)) //AI3_FILIAL+AI3_CODUSU
		
		If AI3->(MsSeek(xFilial("AI3")+::UserCode))
			
			oObj := WsClassNew("LoginUserStruct")
		
			PrtIniUser(::UserCode,oObj)
			oObj:USERLOGIN	:= ::UserLogin
			oObj:USERPASSWORD	:= BSW->BSW_SENHA
					
			aUser := {	oObj:USERCODE,;
						oObj:USERLOGIN,;
						oObj:USERPASSWORD,;
						oObj:USERNAME,;
						oObj:USERROLES,;
						oObj:USERWS,;
						oObj:USERSUPER,;
						{},;
						AI3->AI3_USRSIS}
					
			PutGlbVars("c"+::UserCode,aUser)
			
		endIf
	
	endIf

EndIf

GetGlbVars("c"+::UserCode,@aUser)

If valType(aUser) == "A"

	If UserPortalCode == "000008"
		
		BC4->(DbSelectArea("BC4"))
		if BC4->(FieldPos("BC4_DTBLQ")) > 0
			
			cBSW := BSW->(RetSQLName("BSW"))
			cBSO := BSO->(RetSQLName("BSO"))
			cBAU := BAU->(RetSQLName("BAU"))
			cBC4 := BC4->(RetSQLName("BC4"))
				
			cSql := " SELECT DISTINCT BSO_CODUSR, BSO_CODIGO " //o distinct é necessario para nao relacionar com os registros da BC4 que não sao necessários
			cSql += " FROM "+cBSW+","+cBSO+","+cBAU+","+cBC4
			cSql += " WHERE " 
       		cSql += " BSW_FILIAL = '"+xFilial("BSW")+"' "
          	cSql += " AND BSW_LOGUSR = '"+ ::UserLogin + "' "
          	cSql += " AND BSW_CODACE = '"+ ::UserCode  + "' "
          	cSql += " AND BSO_FILIAL = BSW_FILIAL AND BSO_CODUSR = BSW_CODUSR  "
          	cSql += " AND BSO_FILIAL = BSW_FILIAL AND BSO_CODIGO = BAU_CODIGO "   
          	cSql += " AND BC4_FILIAL = BAU_FILIAL AND BC4_CODCRE = BAU_CODIGO AND BC4_DTBLQ <  '"+ dBloqueio + "'" 
          	cSql += " AND BSW_LOGUSR = '" + AllTrim(::UserLogin) + "' "
			cSql += " AND "+cBSW+".D_E_L_E_T_ = ' ' "
			cSql += " AND "+cBSO+".D_E_L_E_T_ = ' ' "
			cSql += " AND "+cBAU+".D_E_L_E_T_ = ' ' "
			cSql += " AND "+cBC4+".D_E_L_E_T_ = ' ' "
				
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
			//³ Execute
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
			cSql 		:= ChangeQuery(cSql)
			cAliasTrb 	:= GetNextAlias()
			dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cSQL),cAliasTrb,.F.,.T.)
			
			Count To nQtdReg 
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Monta matriz de retorno												   ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				
			If !(cAliasTrb)->(Eof())
					
				//verifica se existe mais de um prestador para o mesmo usuário do portal. 
				cSql := " SELECT COUNT(*) CONTADOR " 
				cSql += " FROM " + cBSW + "," + cBSO 
				cSql += " WHERE BSW_FILIAL = '" + xFilial("BSW") + "' "
				cSql += " AND BSW_LOGUSR = '" + ::UserLogin + "' "
          		cSql += " AND BSW_CODACE = '" + ::UserCode  + "' "
				cSql += " AND BSO_FILIAL = BSW_FILIAL AND BSO_CODUSR = BSW_CODUSR  "
				cSql += " AND " + cBSW + ".D_E_L_E_T_ = ' ' "
				cSql += " AND " + cBSO + ".D_E_L_E_T_ = ' ' "
				cSql := ChangeQuery(cSql)
				dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cSQL),"TrbBsw",.F.,.T.)
				
				//compara se todos os prestadores contidos no login estão bloqueados
				If nQtdReg ==  TrbBsw->(CONTADOR)
					lMenu := .T. //A RDA esta bloqueada porem se existir uma liberação temporario do menu o mesmo devera ser exibido
				EndIf 
				TrbBsw->(dbcloseArea())
			Else
				lMenu := .F.
				lOk := .T.// para exibir todos os menus conforme o padrao
			Endif
			(cAliasTrb)->(DbCloseArea())
		Else
			lMenu := .F.
			lOk := .T. 
		Endif
	Endif
		
	If valType(aUser) == "A"	//Isso é necessário pois ocorreu caso dessa variável chegar aqui como Nil. Se isso acontece, todo o portal para. Não retirar essa condição.
		
		#IFDEF TOP
		
			If !Empty(BSW->BSW_PERACE)
				
				cAlias := "PrtListMenu"
				lQuery := .T.
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Necessario o uso desta query para exibição dos menus customizados junto ao Perfil de Acesso				  ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				cSqlMenCus := "SELECT DISTINCT AI8_WEBSRV "
				cSqlMenCus += " FROM " + RetSqlName("AI8") 			
				cSqlMenCus += " WHERE AI8_WEBSRV NOT IN ('"+ Space(Len(AI8->AI8_WEBSRV))+"',"+ iIf(Len(aUser)>=6,aUser[6],"")+")			
				
				cSqlMenCus := ChangeQuery(cSqlMenCus)
				dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cSqlMenCus),"MenuCustom",.F.,.T.)
				MenuCustom->(dbGoTop())
				
				While !MenuCustom->(EOF())
					cMenuCus += " ,'" + AllTrim(MenuCustom->(AI8_WEBSRV)) + "'"
					MenuCustom->(dbSkip())
				EndDo
				
				aUser[6] += cMenuCus
				MenuCustom->(dbCloseArea())
				cQuery := "SELECT * "
				cQuery += "FROM " + RetSqlName("AI8") + " AI8 "
				cQuery += "LEFT JOIN " + RetSqlName("B7J") + " B7J ON "
				cQuery += "AI8.AI8_CODMNU = B7J.B7J_CODMNU AND "
				cQuery += "B7J.B7J_FILIAL = '" + xFilial("B7J") + "' AND "
				cQuery += "B7J.B7J_CODPER = '" + BSW->BSW_PERACE + "' AND "
				cQuery += "B7J.B7J_PERACE = '1' AND "
				cQuery += "B7J.D_E_L_E_T_=' ' "
				cQuery += "WHERE AI8.AI8_FILIAL='" + xFilial("AI8") + "' AND "
				If lMenu
					cQuery += "AI8.AI8_PORTAL = '"+::UserPortalCode+ "' AND AI8.AI8_TEMP = '1' AND " 
				Else
					cQuery += "AI8.AI8_PORTAL = '"+::UserPortalCode+ "' AND "
				Endif
				cQuery += "(AI8.AI8_CODPAI = '" + Space(6) + "' OR B7J.B7J_CODPER <> '" + Space(6) + "') AND "
				cQuery += "AI8.AI8_WEBSRV IN('"+Space(Len(AI8->AI8_WEBSRV))+"'," + iif(len(aUser)>=6 .And. !Empty(aUser[6]),aUser[6] ,"''") + ") AND "		
				cQuery += "AI8.D_E_L_E_T_=' ' "
		
				cQuery := ChangeQuery(cQuery)
				
				dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias)	
			Else
				cAlias := "PrtListMenu"
				lQuery := .T.
		
				cQuery := "SELECT * "
				cQuery += "FROM "+RetSqlName("AI8")+" AI8 "
				cQuery += "WHERE AI8.AI8_FILIAL='"+xFilial("AI8")+"' AND "
				If lMenu
					//Acrescentado AI8.AI8_WEBSRV = '' OR AI8.AI8_TEMP = '1' para exibir somente os itens do menu liberado
					cQuery += "AI8.AI8_PORTAL = '"+::UserPortalCode+ "' AND AI8.AI8_WEBSRV = '' OR AI8.AI8_TEMP = '1' and " 
				Else
					cQuery += "AI8.AI8_PORTAL = '"+::UserPortalCode+ "' AND "
				Endif
					cQuery += "AI8.AI8_WEBSRV IN('"+Space(Len(AI8->AI8_WEBSRV))+"',"+iIf(len(aUser)>=6,aUser[6],"''")+") AND "
				cQuery += "AI8.D_E_L_E_T_=' ' "
		
				cQuery := ChangeQuery(cQuery)
				
				dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias)	
			EndIf
		#ELSE

			AI8->(dbSetOrder(1))
			AI8->(MsSeek(xFilial("AI8")+::UserPortalCode))
		#ENDIF
	Else
		SetSoapFault("PRTLISTMENU","Erro Fatal")
		lRetorno := .F.
		return lRetorno
	EndIf	
	
	if valType(aUser) == "A" .and. len(aUser) > 0

		While ! (cAlias)->(Eof()) .And. (cAlias)->AI8_FILIAL == xFilial("AI8") .And. (cAlias)->AI8_PORTAL == ::UserPortalCode
	
			If AllTrim((cAlias)->AI8_WEBSRV) $ aUser[6] .Or. Empty((cAlias)->AI8_WEBSRV)
				
				If AllTrim((cAlias)->AI8_ROTINA) $ "W_PWSA190.APW" .And. cPaisLoc == "MEX"
					dbSkip()
					Loop
				EndIf
				
				nX++
				aadd(::UserListMenu,WsClassNew("LoginMenu"))
				::UserListMenu[nX]:Code := (cAlias)->AI8_CODMNU
				If cIdiom == 'es' 
					::UserListMenu[nX]:Description := (cAlias)->AI8_TEXTOS
				ElseIf cIdiom == 'en' 
					::UserListMenu[nX]:Description := (cAlias)->AI8_TEXTOE
				Else
					::UserListMenu[nX]:Description := (cAlias)->AI8_TEXTO
				Endif
				::UserListMenu[nX]:SuperiorCode  := (cAlias)->AI8_CODPAI
				::UserListMenu[nX]:WebService    := (cAlias)->AI8_WEBSRV
				::UserListMenu[nX]:ProcedureCall := (cAlias)->AI8_ROTINA
				::UserListMenu[nX]:Order         := (cAlias)->AI8_ORDEM
				::UserListMenu[nX]:MenuIsBlocked 	:= ((cAlias)->AI8_MSBLQL == "1") // 1-Bloqueado 2-Não Bloqueado
				::UserListMenu[nX]:ApvlVision	 	:= (cAlias)->AI8_VISAPV	//Campo Visão: não obrigatório; tamanho: 6 caracteres; F3:RDK
				::UserListMenu[nX]:ApvlInitLevel	:= (cAlias)->AI8_INIAPV	//Campo Nível Inicial: não obrigatório; numérico; tamanho: 2; inicializador padrão: 0
				::UserListMenu[nX]:ApvlLevels  		:= (cAlias)->AI8_APRVLV	//Campo Nível de Aprovação: não obrigatório; numérico; tamanho: 2; inicializador padrão: 0
	
			EndIf
			
		(cAlias)->(dbSkip())
		EndDo
		
	endIf
		
	If lQuery
		(cAlias)->(dbCloseArea())
		dbSelectArea("AI8")	
	EndIf
	
	If nX == 0
		lRetorno := .f.
		SetSoapFault("PRTLISTMENU",STR0027) //"Menu não encontrado"
	EndIf
	
Else
	SetSoapFault("PRTLISTMENU",STR0026) //"Usuario invalido"
	lRetorno := .F.
EndIf

RestArea(aArea)

Return(lRetorno)
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PrtGetClientsByUser³Autor  ³ Totvs		³ Data ³11.03.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³PrtGetClientsByUser										   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
WSMETHOD PrtGetClientsByUser WSRECEIVE UserCode WSSEND Clients WSSERVICE UserPortal
	Local aArea    := GetArea()
	Local aAreaAI4 := AI4->(GetArea())
	Local lReturn  := .T.
	//Local aClients := {}

	dbSelectArea("AI4")
	dbSetOrder(1)  // AI4_FILIAL + AI4_CODUSU + AI4_CODCLI + AI4_LOJCLI
		
	MsSeek(xFilial("AI4") + ::UserCode)
	
	While !AI4->(Eof()) .And. ;
         AI4->AI4_FILIAL == xFilial("AI4") .And. ;
         AI4->AI4_CODUSU == ::UserCode
			
		Aadd(::Clients, AI4->AI4_CODCLI)
		
		AI4->(dbSkip())
	EndDo
	
	RestArea(aAreaAI4)
	RestArea(aArea)
Return lReturn
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PrtAmbiente        ³Autor  ³ Totvs		³ Data ³08.02.2012 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Retorna informacoes do ambiente							   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
WSMETHOD PrtAmbiente WSRECEIVE NULLPARAM WSSEND InfAmbiente WSSERVICE UserPortal
LOCAL aArea 	:= GetArea()
LOCAL lReturn  	:= .T.

::InfAmbiente 				:= WsClassNew( "SAmbiente" )
::InfAmbiente:RpoRelease	:= GetRpoRelease()
::InfAmbiente:Versao		:= GetVersao(.F.)

RestArea(aArea)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Fim do Metodo
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
Return lReturn
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PrtChkUser³Autor  ³ Eduardo Riera         ³ Data ³11.03.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Funcao verificacao de servico habilitado para um determinado ³±±
±±³          ³usuario                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo do usuario                                     ³±±
±±³          ³ExpC2: Identificador do web service                          ³±±
±±³          ³ExpC3: Identificador do metodo                          (OPC)³±±
±±³          ³ExpC4: Identificador da entidade                        (OPC)³±±
±±³          ³ExpC5: Codigo da identidade                             (OPC)³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica que o servico eh valido                        ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta funcao verifica se o usuario atual possui direitos sobre³±±
±±³          ³a execucao de um determinado WS                              ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ CRM/Materiais/Portais                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PrtChkUser(cCodigo,cIdWService,cMethod,cEntidade,cIdEntidade)

Local lRetorno := .F.
Local aUser    := {}
Local cJobName := GETWEBJOB()
Local cUsrAudit:= ""

DEFAULT cMethod := ""
DEFAULT cEntidade:= ""
DEFAULT cIDEntidade := ""

If "MSALPHA"==AllTrim(cCodigo)
	lRetorno := .T.
Else
	If GetGlbVars("c"+cCodigo,@aUser)
		If !Empty(aUser)
			If (AllTrim(aUser[1]) == AllTrim(cCodigo)	.And. AllTrim(Upper(cIdWService))$AllTrim(Upper(aUser[6])))
				lRetorno := .T.
			EndIf
			If !Empty(aUser[9])
				If !Empty(cEntidade)
					If cEntidade <> "USER"
						dbSelectArea(cEntidade)
						dbSetOrder(1)
						If !MsSeek(xFilial(cEntidade)+cIdEntidade)
							lRetorno := .F.
							SetSoapFault("PRTCHKUSER",STR0028) //"Entidade invalida para este WebService - Validacao de usuario interno"
						EndIf
					EndIf
				EndIf
			Else
				If !Empty(cEntidade)
					If aScan(aUser[8],{|x| x[1]==cEntidade .And. x[2]==cIdEntidade})==0
						lRetorno := .F.
						SetSoapFault("PRTCHKUSER",STR0029) //"Entidade invalida para este WebService"
					EndIf
				EndIf
			EndIf
		EndIf
	Else
		lRetorno := .F.
	EndIf
EndIf
If !lRetorno
	SetSoapFault("PRTCHKUSER",STR0030) //"WebService invalido para este login"
Else
	
	//AuditTrail
	If cCodigo == "MSALPHA"
		cUsrAudit := "MSALPHA"
	   	//NAO EXECUTAR TCINTERNAL QUANDO USUARIO MSALPHA, POIS O MESMO EH UTILIZADO NO 
	   	//LOGIN E PASSA A REGISTRAR TODAS AS OPERACOES SOB ESTE "PSEUDONIMO" - SIGA3286
	   	//TCInternal(8,cUsrAudit)
	Else
		cUsrAudit := alltrim(aUser[2])
		TCInternal(8,cUsrAudit)
	EndIf
EndIf

Return(lRetorno)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PrtIniUser³Autor  ³ Eduardo Riera         ³ Data ³11.03.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Funcao carrega os dados do profile do usuario no Web Service ³±±
±±³          ³de Login                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo do usuario                                     ³±±
±±³          ³ExpO2: Objeto a ser atualizado                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica que a operacao foi realizada com sucesso       ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta funcao carrega os dados do profile do usuario           ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ CRM/Materiais/Portais                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Atualizacoes sofridas desde a Construcao Inicial.                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Analista     ³ Data   ³ BOPS ³  Motivo da Alteracao                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Cleber M.    ³30/03/07³118960³-Incluida validacao para o campo Grupo,  ³±±
±±³              ³        ³      ³evitando-se erro na abertura do Portal.  ³±±
±±³ Tatiane M.   ³15/06/07³118960³-Comentado a inclusão da Entidade "QAA"  ³±±
±±³              ³        ³      ³ na estrutura de usuários, pois o Portal ³±±
±±³              ³        ³      ³ de Documentos ainda não foi implementado³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function PrtIniUser( cCodigo, oObj, cUserLogin, cUserPsw, cFilRD0, lLoginRH )
Local aArea     	:= getArea()
Local cAliasAI4 	:= "AI4"
Local cAliasAI5 	:= "AI5"
Local cAliasAI6 	:= "AI6"
Local lQuery    	:= .f.
Local lRetorno  	:= .t.
Local lMvUsrPort	:= superGetMv("MV_USERPOR",, .F.)
Local nX        	:= 0
Local nItem     	:= 0
Local aInfo 		:= {}
Local cQUsuario 	:= ""
Local cQuery    	:= ""
local lAI6_WKFAPV	:= AI6->( fieldPos('AI6_WKFAPV') ) > 0
Local lCpoRD0		:= RD0->(ColumnPos("RD0_FILRH")) > 0
Local cChave		:= ""

//O parametro MV_GSPUBL = "2" identifica que eh GSP-Caixa. 
//Se existir o parametro MV_VDFLOGO, eh porque eh GSP-MP (novo modelo de GSP).
Local cGSP 		:= SuperGetMv("MV_GSPUBL",,"1")
DEFAULT cFilRD0 := cFilAnt
DEFAULT lLoginRH := .F.

If cGSP == "2" .And. GetMv("MV_VDFLOGO",,"0") <> "0"
   cGSP := "3"
EndIf

//Verifica se é login do RH e então verifica a existência do campo RD0_FILRH
If lLoginRH
	If !lCpoRD0
		cChave := xFilial("AI3")+cCodigo
	Else
		cChave := xFilial("AI3",cFilRD0)+cCodigo
	EndIf
Else
	cChave := xFilial("AI3")+cCodigo
EndIf

AI3->(dbSetOrder(1))
If AI3->(MsSeek(cChave))

	If ! Empty(AI3->AI3_GRUPO) .and. (AI3->AI3_GRUPO <> cCodigo)
		PrtIniUser(AI3->AI3_GRUPO,@oObj)
	EndIf
	
	//Atualiza os dados na estrutura de usuario                               
	
	oObj:USERCODE          	:= AI3->AI3_CODUSU
	oObj:USERLOGIN         	:= IIF( cUserLogin == NIL, AI3->AI3_LOGIN, cUserLogin )
	oObj:USERPASSWORD      	:= IIF( cUserPsw == NIL, AI3->AI3_PSW, cUserPsw )
	oObj:USERSKIN          	:= AI3->AI3_SKIN
	oObj:USERNAME          	:= AI3->AI3_NOME
	oObj:USEREMAIL			:= AI3->AI3_EMAIL 
	oObj:USERROLES         	:= VAL(AI3->AI3_ADMIN)
	oObj:USERACCESSESHEADER := {RetTitle("AI7_WEBSRV"),RetTitle("AI7_DESCRI")}
	oObj:USERENTIRIESHEADER	:= {"Entidade",RetTitle("AI4_CODCLI")+"/"+RetTitle("AI5_CODFOR"),RetTitle("A1_NREDUZ"),RetTitle("AI4_NOMCLI"),RetTitle("A1_CGC"),RetTitle("AI3_SKIN")}
	oObj:USERGROUP         	:= AI3->AI3_GRUPO
	
	DEFAULT oObj:USERENTIRIES      := {}
    DEFAULT oObj:USERWS            := ""
	DEFAULT oObj:USERACCESSES      := {}
	
	#IFDEF TOP
		lQuery 		:= .T.
		cAliasAI4 	:= "PRTLOGIN"

		cQuery := " SELECT AI4_FILIAL, AI4_CODUSU, AI4_CODCLI, AI4_LOJCLI, AI4_SKIN "
		cQuery += "   FROM " + RetSqlName("AI4") + " AI4 "
		cQuery += "  WHERE AI4.AI4_FILIAL = '" + xFilial("AI4")  + "' AND "
		cQuery += "        AI4.AI4_CODUSU = '" + AI3->AI3_CODUSU + "' AND "
		cQuery += "        AI4.D_E_L_E_T_ = ' ' "

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,ChangeQuery(cQuery)),cAliasAI4)
		
	#ELSE
		AI4->(dbSetOrder(1))
		AI4->(MsSeek(xFilial("AI4") + AI3->AI3_CODUSU))
	#ENDIF
	
	SA1->(dbSetOrder(1))
	While ! (cAliasAI4)->(Eof()) .and. (cAliasAI4)->AI4_FILIAL == xFilial("AI4") .and. (cAliasAI4)->AI4_CODUSU == AI3->AI3_CODUSU
		
		SA1->( MsSeek(xFilial("SA1") + (cAliasAI4)->AI4_CODCLI + (cAliasAI4)->AI4_LOJCLI))
		
		nItem := aScan(oObj:USERENTIRIES,{|o| o:ENTIRY == "SA1" .And. o:ID_ENTIRY == (cAliasAI4)->AI4_CODCLI + (cAliasAI4)->AI4_LOJCLI })
		
		If nItem == 0
		
			AAdd(oObj:USERENTIRIES,WSClassNew("LOGINENTIRYSTRUCT"))
			nItem := Len(oObj:USERENTIRIES)
			oObj:USERENTIRIES[nItem]:ENTIRY    	 := "SA1"
			oObj:USERENTIRIES[nItem]:ID_ENTIRY 	 := (cAliasAI4)->AI4_CODCLI + (cAliasAI4)->AI4_LOJCLI
			oObj:USERENTIRIES[nItem]:NICKNAME  	 := SA1->A1_NREDUZ
			oObj:USERENTIRIES[nItem]:NAME      	 := SA1->A1_NOME
			oObj:USERENTIRIES[nItem]:FederalID   := SA1->A1_CGC
			oObj:USERENTIRIES[nItem]:Skin        := (cAliasAI4)->AI4_SKIN
			
		EndIf
	
	(cAliasAI4)->(dbSkip())
	EndDo
	
	If lQuery
		(cAliasAI4)->(dbCloseArea())
	EndIf

	#IFDEF TOP
		lQuery 		:= .T.
		cAliasAI5 	:= "PRTLOGIN"
		
		cQuery := " SELECT AI5_FILIAL, AI5_CODUSU, AI5_CODFOR, AI5_LOJFOR, AI5_SKIN "
		cQuery += "   FROM " + RetSqlName("AI5") + " AI5 "
		cQuery += "  WHERE AI5.AI5_FILIAL = '" + xFilial("AI5") + "' AND "
		cQuery += "        AI5.AI5_CODUSU = '" + AI3->AI3_CODUSU + "' AND "
		cQuery += "        AI5.D_E_L_E_T_ = ' ' "

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,ChangeQuery(cQuery)),cAliasAI5)

	#ELSE
		AI5->(dbSetOrder(1))
		AI5->(MsSeek(xFilial("AI5")+AI3->AI3_CODUSU))
	#ENDIF
	
	SA2->(dbSetOrder(1))
	While ! (cAliasAI5)->(Eof()) .And. (cAliasAI5)->AI5_FILIAL == xFilial("AI5") .And. (cAliasAI5)->AI5_CODUSU == AI3->AI3_CODUSU
		
		SA2->(MsSeek(xFilial("SA2")+(cAliasAI5)->AI5_CODFOR + (cAliasAI5)->AI5_LOJFOR))
		
		nItem := aScan(oObj:USERENTIRIES,{|o| o:ENTIRY == "SA2" .And. o:ID_ENTIRY == (cAliasAI5)->AI5_CODFOR + (cAliasAI5)->AI5_LOJFOR } )
		
		If nItem == 0
		
			AAdd(oObj:USERENTIRIES,WSClassNew("LOGINENTIRYSTRUCT"))
			nItem := Len(oObj:USERENTIRIES)
			oObj:USERENTIRIES[nItem]:ENTIRY    	:= "SA2"
			oObj:USERENTIRIES[nItem]:ID_ENTIRY 	:= (cAliasAI5)->AI5_CODFOR + (cAliasAI5)->AI5_LOJFOR
			oObj:USERENTIRIES[nItem]:NICKNAME  	:= SA2->A2_NREDUZ
			oObj:USERENTIRIES[nItem]:NAME      	:= SA2->A2_NOME
			oObj:USERENTIRIES[nItem]:FederalID  := SA2->A2_CGC
			oObj:USERENTIRIES[nItem]:Skin       := (cAliasAI5)->AI5_SKIN
			
		EndIf
		
	(cAliasAI5)->(dbSkip())
	EndDo
	
	If lQuery
		(cAliasAI5)->(dbCloseArea())
	EndIf
	
	If ! Empty(AI3->AI3_USRSIS)	
	
		SA3->(dbSetOrder(7))
		If SA3->(MsSeek(xFilial("SA3")+AI3->AI3_USRSIS))
		
			AAdd(oObj:USERENTIRIES,WSClassNew("LOGINENTIRYSTRUCT"))
			nItem := Len(oObj:USERENTIRIES)
			oObj:USERENTIRIES[nItem]:ENTIRY    	:= "SA3"
			oObj:USERENTIRIES[nItem]:ID_ENTIRY 	:= SA3->A3_COD
			oObj:USERENTIRIES[nItem]:NICKNAME  	:= SA3->A3_NREDUZ
			oObj:USERENTIRIES[nItem]:NAME      	:= SA3->A3_NOME
			oObj:USERENTIRIES[nItem]:FederalID  := SA3->A3_CGC
			oObj:USERENTIRIES[nItem]:Skin       := AI3->AI3_SKIN
			
		EndIf

		AA1->(dbSetOrder(4))
		If AA1->(MsSeek(xFilial("AA1")+AI3->AI3_USRSIS))
		
			AAdd(oObj:USERENTIRIES,WSClassNew("LOGINENTIRYSTRUCT"))
			nItem := Len(oObj:USERENTIRIES)
			oObj:USERENTIRIES[nItem]:ENTIRY    	:= "AA1"
			oObj:USERENTIRIES[nItem]:ID_ENTIRY 	:= AA1->AA1_CODTEC
			oObj:USERENTIRIES[nItem]:NICKNAME  	:= AA1->AA1_NOMUSU
			oObj:USERENTIRIES[nItem]:NAME      	:= AA1->AA1_NOMTEC
			oObj:USERENTIRIES[nItem]:FederalID  := ""
			oObj:USERENTIRIES[nItem]:Skin       := AI3->AI3_SKIN
			
		EndIf                                                   
		                   
		PswOrder(1)
		
		If PswSeek( AI3->AI3_USRSIS )
			aInfo 		:= PswRet()
			cQUsuario 	:= aInfo[1][2]  //LOGIN
		EndIf
		                    
		//*************************************************************
		//Comentado pois ainda não existe o portal Documentos.
		//Será implementado posteriormente.
		//*************************************************************
		/*DbSelectArea("QAA")
		DbSetOrder(6)

		If QAA->(DbSeek(AllTRIM(UPPER(cQUsuario))))
			AAdd(oObj:USERENTIRIES,WSClassNew("LOGINENTIRYSTRUCT"))
			nItem := Len(oObj:USERENTIRIES)
			oObj:USERENTIRIES[nItem]:ENTIRY    	:= "QAA"
			oObj:USERENTIRIES[nItem]:ID_ENTIRY 	:= QAA->QAA_FILIAL+QAA->QAA_MAT
			oObj:USERENTIRIES[nItem]:NICKNAME  	:= QAA->QAA_APELID
			oObj:USERENTIRIES[nItem]:NAME      	:= QAA->QAA_NOME
			oObj:USERENTIRIES[nItem]:FederalID 	:= ""
			oObj:USERENTIRIES[nItem]:Skin     	:= AI3->AI3_SKIN
		EndIf        
		DbSetOrder(1)      */
	
	Else
	
		If lMvUsrPort
		
			SA3->(dbSetOrder(1))
			If SA3->(MsSeek(xFilial("SA3")+AI3->AI3_VEND))
		
				AAdd(oObj:USERENTIRIES,WSClassNew("LOGINENTIRYSTRUCT"))
				nItem := Len(oObj:USERENTIRIES)
				oObj:USERENTIRIES[nItem]:ENTIRY    	:= "SA3"
				oObj:USERENTIRIES[nItem]:ID_ENTIRY 	:= SA3->A3_COD
				oObj:USERENTIRIES[nItem]:NICKNAME  	:= SA3->A3_NREDUZ
				oObj:USERENTIRIES[nItem]:NAME      	:= SA3->A3_NOME
				oObj:USERENTIRIES[nItem]:FederalID  := SA3->A3_CGC
				oObj:USERENTIRIES[nItem]:Skin       := AI3->AI3_SKIN
				
			EndIf
			
			AA1->(dbSetOrder(1))
			If AA1->(MsSeek(xFilial("AA1")+AI3->AI3_CODTEC))
				
				AAdd(oObj:USERENTIRIES,WSClassNew("LOGINENTIRYSTRUCT"))
				nItem := Len(oObj:USERENTIRIES)
				oObj:USERENTIRIES[nItem]:ENTIRY    	:= "AA1"
				oObj:USERENTIRIES[nItem]:ID_ENTIRY 	:= AA1->AA1_CODTEC
				oObj:USERENTIRIES[nItem]:NICKNAME  	:= AA1->AA1_NOMUSU
				oObj:USERENTIRIES[nItem]:NAME      	:= AA1->AA1_NOMTEC
				oObj:USERENTIRIES[nItem]:FederalID  := ""
				oObj:USERENTIRIES[nItem]:Skin       := AI3->AI3_SKIN
				
			EndIf
			   		
		EndIf 
	
	EndIf

	#IFDEF TOP
		lQuery 		:= .t.
		cAliasAI6 	:= "PRTLOGIN"

		cQuery := " SELECT AI6_FILIAL, AI6_CODUSU, AI6_WEBSRV "
		
		if lAI6_WKFAPV
			cQuery += " ,AI6_WKFAPV "
		endIf
		
		cQuery += "   FROM " + RetSqlName("AI6") + " AI6 "
		If lLoginRH
			If !lCpoRD0
				cQuery += "  WHERE AI6.AI6_FILIAL = '" + xFilial("AI6")  + "' AND "
			Else
				cQuery += "  WHERE AI6.AI6_FILIAL = '" + xFilial("AI6", cFilRD0)  + "' AND "
			EndIf
		Else
			cQuery += "  WHERE AI6.AI6_FILIAL = '" + xFilial("AI6")  + "' AND "
		EndIf
		cQuery += "        AI6.AI6_CODUSU = '" + AI3->AI3_CODUSU + "' AND "
		cQuery += "        AI6.D_E_L_E_T_ = ' ' "

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,ChangeQuery(cQuery)),cAliasAI6)
		
	#ELSE
		AI6->(dbSetOrder(1))
		AI6->(MsSeek(xFilial("AI6")+AI3->AI3_CODUSU))
	#ENDIF
	
	AI7->(dbSetOrder(1))

	If !lLoginRH
	
		While ! (cAliasAI6)->(Eof()) .And. (cAliasAI6)->AI6_FILIAL == xFilial("AI6") .And. (cAliasAI6)->AI6_CODUSU == AI3->AI3_CODUSU

			AI7->( MsSeek(xFilial("AI7") + (cAliasAI6)->AI6_WEBSRV))

			nX := aScan(oObj:USERACCESSES,{|o| o:WEBSRV == (cAliasAI6)->AI6_WEBSRV})
			
			If nX == 0
			
				AAdd(oObj:USERACCESSES,WSClassNew("LOGINACCESSESSTRUCT"))
					
				nX := Len(oObj:USERACCESSES)
				
				// Gestao Publica - MP
				If cGSP == '3' .and. lAI6_WKFAPV 
					oObj:USERACCESSES[nX]:WKFAPV := (cAliasAI6)->AI6_WKFAPV
				Else
					oObj:USERACCESSES[nX]:WKFAPV := ""
				EndIf
									
				oObj:USERACCESSES[nX]:WEBSRV     := (cAliasAI6)->AI6_WEBSRV
				oObj:USERACCESSES[nX]:NAME       := AI7->AI7_DESCRI
				oObj:USERWS                      += ",'" + ALLTrim((cAliasAI6)->AI6_WEBSRV) + "'"
			EndIf

		(cAliasAI6)->(dbSkip())
		EndDo
	Else
		While ! (cAliasAI6)->(Eof()) .And. If( !lCpoRD0, (cAliasAI6)->AI6_FILIAL == xFilial("AI6"), (cAliasAI6)->AI6_FILIAL == xFilial("AI6",cFilRD0) ) .And. (cAliasAI6)->AI6_CODUSU == AI3->AI3_CODUSU

			AI7->( MsSeek(xFilial("AI7",cFilRD0) + (cAliasAI6)->AI6_WEBSRV))

			nX := aScan(oObj:USERACCESSES,{|o| o:WEBSRV == (cAliasAI6)->AI6_WEBSRV})
			
			If nX == 0
			
				AAdd(oObj:USERACCESSES,WSClassNew("LOGINACCESSESSTRUCT"))
					
				nX := Len(oObj:USERACCESSES)
				
				// Gestao Publica - MP
				If cGSP == '3' .and. lAI6_WKFAPV 
					oObj:USERACCESSES[nX]:WKFAPV := (cAliasAI6)->AI6_WKFAPV
				Else
					oObj:USERACCESSES[nX]:WKFAPV := ""
				EndIf
									
				oObj:USERACCESSES[nX]:WEBSRV     := (cAliasAI6)->AI6_WEBSRV
				oObj:USERACCESSES[nX]:NAME       := AI7->AI7_DESCRI
				oObj:USERWS                      += ",'" + ALLTrim((cAliasAI6)->AI6_WEBSRV) + "'"
			EndIf

		(cAliasAI6)->(dbSkip())
		EndDo
	EndIf
	
	If SubStr(oObj:USERWS,1,1) == ","
		oObj:USERWS := SubStr(oObj:USERWS,2)
	EndIf
	
	If lQuery
		(cAliasAI6)->(dbCloseArea())
	EndIf
	
Else
	lRetorno := .f.
EndIf

RestArea(aArea)

Return(lRetorno)

Static Function fRHMenu()

Local aArea		:= GetArea()
Local aAreaSX3	:={} 

dbSelectArea("SX3")
aAreaSX3 := SX3->(GetArea()) 
SX3->( dbSetOrder(2))

dbSelectArea("AI8")
AI8->(dbSetOrder(4))
If AI8->(dbSeek(xFilial("AI8")+"000006"+"W_PWSA190.APW"))
	If Alltrim(AI8->AI8_TEXTO) == "Ferias"
		RecLock("AI8",.F.)
		AI8->AI8_TEXTO := "Férias"
		AI8->(msUnlock())
	EndIf
EndIf

If AI8->(dbSeek(xFilial("AI8")+"000006"+"W_PWSA150.APW"))
	If Alltrim(AI8->AI8_TEXTO) == "Contratacao"
		RecLock("AI8",.F.)
		AI8->AI8_TEXTO := "Contratação"
		AI8->(msUnlock())
	EndIf
EndIf

If AI8->(dbSeek(xFilial("AI8")+"000006"+"W_PWSA120.APW"))
	If Alltrim(AI8->AI8_TEXTO) == "Acao Salarial"
		RecLock("AI8",.F.)
		AI8->AI8_TEXTO := "Ação Salarial"
		AI8->(msUnlock())
	EndIf
EndIf

If AI8->(dbSeek(xFilial("AI8")+"000006"+"W_PWSA140.APW"))
	If Alltrim(AI8->AI8_TEXTO) == "Transferencia"
		RecLock("AI8",.F.)
		AI8->AI8_TEXTO := "Transferência"
		AI8->(msUnlock())
	EndIf
EndIf

If AI8->(dbSeek(xFilial("AI8")+"000006"+"W_PWSA140.APW"))
	If Alltrim(AI8->AI8_TEXTO) == "Transferencia"
		RecLock("AI8",.F.)
		AI8->AI8_TEXTO := "Transferência"
		AI8->(msUnlock())
	EndIf
EndIf

If AI8->(dbSeek(xFilial("AI8")+"000006"+"W_PWSA100A.APW"))
	If Alltrim(AI8->AI8_TEXTO) == "Ferias"
		RecLock("AI8",.F.)
		AI8->AI8_TEXTO := "Férias"
		AI8->(msUnlock())
	EndIf
EndIf

AI8->(dbSetOrder(1))
If AI8->(dbSeek(xFilial("AI8")+"000006"))
	While !AI8->(Eof()) .And. AI8->(AI8_FILIAL+AI8_PORTAL) == xFilial("AI8")+"000006" 
		If Alltrim(AI8->AI8_TEXTO) == "Solicitacoes"
			RecLock("AI8",.F.)
			AI8->AI8_TEXTO := "Solicitações"
			AI8->(msUnlock())
			Exit		
		Endif
		AI8->(dbSkip())
	EndDo
EndIf

RestArea( aAreaSX3 )
RestArea( aArea )

return

/*/{Protheus.doc}UnifiedLoginRH()
- Unificação da regra existente no login do Portal RH para ser utilizada no REST e no SOAP

@author:		Matheus Bizutti
@since:			05/07/2017	
/*/
Function UnifiedLoginRH(lRetorno,USERLOGIN,USERPASSWORD,USERTYPE,PORTALACCESS,lRest,aUser,USERPCODE,cRestFault,nNumLPwd,lBlocked)

Local lRetAtivo	:= .F.
Local lRetRD0	:= .F.
Local lFuncSRA	:= .F.
Local lChkUser	:= .F.
Local aRetorno  := {}
Local aRetSub	:= {}
Local aRetBen	:= {}
Local aRetFun	:= {}
Local nAtivSRA	:= 0
Local nI		:= 0
Local nX		:= 0
Local cPrimNome := ""
Local cFilBusca	:= ""
Local cSenhaC	:= ""
Local lRd0CPO	:= If(RD0->(ColumnPos("RD0_FILRH")) > 0, .T., .F.)

Default lRetorno 	 := .F.
Default USERLOGIN	 := ""
Default USERPASSWORD := ""
Default USERTYPE	 := "" 
Default PORTALACCESS := ""
Default USERPCODE	 := WSClassNew("LoginUserStruct")
Default lRest 		 := .F.
Default aUser		 := {}
Default cRestFault	 := ""
Default nNumLPwd	 := 0
Default lBlocked	 := .F.

If lRest 
	USERPCODE := WSClassNew("LoginUserStruct")
EndIf

lChkUser := nNumLPwd > 0

fRHMenu()
dbSelectArea("RD0")

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³Verifica caso a tentativa de login seja feita pela login unificado(RD0_LOGIN)
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
dbSetOrder(10)           	
If DbSeek( xFilial("RD0")+UPPER(AllTrim(UserLogin)) )
	lRetRD0 := .T.

	If RD0->RD0_MSBLQL == "2"
		lRetAtivo := .T.
	Else
		// Se o Login encontrado estiver demitido, procura outro participante cujo CPF coincida com o valor digitado
		RD0->(dbSetOrder(6))
		If DbSeek( xFilial("RD0")+UPPER(AllTrim(UserLogin)))
			While !Eof() .And. RD0->RD0_CIC == AllTrim(UserLogin)
				// Se encontrar um participante fazendo o primeiro acesso, descarta o participante demitido e passa a tratar apenas o primeiro acesso
				If RD0->RD0_MSBLQL == "2" .And. Empty(RD0_LOGIN)
					lRetRD0 := .F.
					EXIT
				EndIf			
				RD0->(DbSkip())
			EndDo
		EndIf
		// Se não encontrou participante fazendo o primeiro acesso retorna para o funcionário posicionado anteriormente
		If lRetRD0
			RD0->(dbSetOrder(10))
			DbSeek( xFilial("RD0")+UPPER(AllTrim(UserLogin)) )
		EndIf
	EndIf
EndIf

If !(lRetRD0) .and. (RD0->(FieldPos("RD0_DOCID")) > 0)
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
	//³Verifica caso a tentativa de login seja feita pela DOCID(RD0_DOCID)
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
	dbSetOrder(11)           	
	If DbSeek( xFilial("RD0")+UPPER(AllTrim(UserLogin)) )
 		lRetRD0 := .T.
		If RD0->RD0_MSBLQL == "2"
			lRetAtivo := .T.
		EndIf
	EndIf
EndIf			

If !(lRetRD0)
 	If PORTALACCESS == "1"
		dbSetOrder(7)
 	Else
		dbSetOrder(6)           	
 	EndIf

	If MsSeek( xFilial("RD0")+UPPER(AllTrim(UserLogin)) ) .Or. MsSeek( xFilial("RD0")+LOWER(AllTrim(UserLogin)) ) 
 		//-- No Portal RH, pode haver mais de um participante com o mesmo CPF. 
 		//-- Incluido tratamento para procurar um participante ativo.	 		
 		If !PORTALACCESS == "1"
		 	While RD0->( !Eof() .and. RD0_FILIAL+RD0_CIC == xFilial("RD0")+UPPER(AllTrim(UserLogin)) )
		 		If RD0->RD0_MSBLQL == "2" .And. If( lRest, Empty(RD0->RD0_LOGIN), .T. )
			 					lRetRD0   := .T.
		 						lRetAtivo := .T.
		 						EXIT
		 		EndIf
 			 	RD0->( dbSkip()	)
 			End While
 		Else	
			While RD0->( !Eof() .and. RD0_FILIAL + UPPER(AllTrim(RD0_EMAIL)) == xFilial("RD0") + UPPER(AllTrim(UserLogin)) )
				If RD0->RD0_MSBLQL == "2" .And. If( lRest, Empty(RD0->RD0_LOGIN), .T. )
					lRetRD0 	:= .T.
					lRetAtivo 	:= .T.
					Exit
				EndIf
				RD0->( dbSkip()	)
			End While	
		EndIf
	EndIf	
EndIf

//Caso o participante seja um funcionario verifica a quantidade de registros com situacao ativa
If MatParticipant(AllTrim(UserLogin), @aRetFun, .T.)
	lFuncSRA := .T.
	aEval( aRetFun, { |x| If( x[9] $ "A*F* ", nAtivSRA++, Nil ) } )
EndIf

If lChkUser
	If RD0->RD0_ULI >= nNumLPwd
		lRetRD0  := .F.
		lBlocked := .T.
	EndIf
EndIf

If lRetRD0
	If ( !lFuncSRA .And. ( lRetAtivo .Or. RD0->RD0_MSBLQL == "2") ) .Or. ( lFuncSRA .And. lRetAtivo .And. ( nAtivSRA > 0 .Or. SuperGetMV("MV_TCFVREN", .F., "N") != "N" ) )

        If RD0->(ColumnPos("RD0_SENHAC")) > 0
			cSenhaC := RD0->RD0_SENHAC
		EndIf 

		If  fSegLogin( USERPASSWORD, RD0->RD0_SENHA, cSenhaC, lRest ) //Avalia polit. segurança (fonte RHNPLIB.prw)
     
			If lRd0CPO
				cFilBusca	:= xFilial("AI3",RD0->RD0_FILRH)
			Else
				cFilBusca	:= xFilial("AI3")
			EndIf

			dbSelectArea("AI3")
			dbSetOrder(1)
			If MsSeek(cFilBusca+RD0->RD0_PORTAL)
				If lRd0CPO
					PrtIniUser(RD0->RD0_PORTAL,USERPCODE, , , RD0->RD0_FILRH, .T.)
				Else
					PrtIniUser(RD0->RD0_PORTAL,USERPCODE, , , , .T.)
				EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Inializa as variaveis publicas para controle de usuario                 ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

				If Empty(RD0->RD0_LOGIN) .And. !lRest
					If !lRest
						SetSoapFault(STR0033,STR0034) //"*Ret001*" / "Informe novo login unificado de acesso!"  
					Else
						cRestFault := STR0033 + " " + STR0034
					EndIf
					lRetorno := .F.
				Else
					If !(Upper(Alltrim(UserLogin)) == Upper(Alltrim(RD0->RD0_LOGIN))) .And. !lRest
						cPrimNome := ""
						For nI=1 to 30
							cPrimNome += SUBSTR(RD0->RD0_NOME, nI, 1)
							If SUBSTR(RD0->RD0_NOME, nI, 1) == " "
								exit
							Endif	
						Next nI
						
						If !lRest
							SetSoapFault(STR0035,cPrimNome+STR0036) //"*Ret002*" / "Utilize seu novo login unificado de acesso!" 
						Else
							cRestFault := STR0035 + " " + cPrimNome + " " + STR0031
						EndIf
						lRetorno := .F.
					Else
						aUser := {USERPCODE:USERCODE,;
								 USERPCODE:USERLOGIN,;
								 USERPCODE:USERPASSWORD,;
								 USERPCODE:USERNAME,;
								 USERPCODE:USERROLES,;
								 USERPCODE:USERWS,;
								 USERPCODE:USERSUPER,;
								 {},;
								 AI3->AI3_USRSIS}

						For nX := 1 To Len(USERPCODE:USERENTIRIES)
							aadd(aUser[8],{USERPCODE:USERENTIRIES[nX]:ENTIRY,;
								USERPCODE:USERENTIRIES[nX]:ID_ENTIRY,;
								USERPCODE:USERENTIRIES[nX]:NAME,;
								USERPCODE:USERENTIRIES[nX]:NICKNAME,;
								USERPCODE:USERENTIRIES[nX]:FederalID,;
								USERPCODE:USERENTIRIES[nX]:Skin})
						Next nX

						PutGlbVars("c"+AI3->AI3_CODUSU,aUser)
						lRetorno := .T.
					EndIf	
				EndIf
			Else
				If !lRest
					SetSoapFault(STR0010,STR0032) //"LOGIN INVALIDO"###"Perfil do usuario nao localizado"
				Else
					cRestFault := STR0010 + " " + STR0032
				EndIf
					lRetorno := .F.
			EndIf
		Else
			//Atualiza o contador de senhas incorretas caso exista na base
			If lChkUser
				If RecLock("RD0", .F.)
					RD0->RD0_ULI += 1
					RD0->( MsUnlock() )
				EndIf
				lBlocked := RD0->RD0_ULI >= nNumLPwd
			EndIf

			If !lRest
				SetSoapFault(STR0010,STR0011) //"LOGIN INVALIDO"###"A senha informada esta incorreta"
			Else
				cRestFault := If( lBlocked, STR0038, STR0010 + " " + STR0011 ) //"Usuário bloqueado! Contate o administrador do sistema.")
			EndIf
			lRetorno := .F.	
		EndIf		
	Else
		If !lRest
			SetSoapFault(STR0010,STR0031) //"LOGIN INVALIDO"###"Usuario esta Inativo no cadastro de pessoas"
		Else
			cRestFault := STR0010 + " " + STR0031
		EndIf
		lRetorno := .F.					
	EndIf
Else
	If !lRest
		SetSoapFault(STR0010,STR0012) //"LOGIN INVALIDO"###"O usuario informado esta incorreto ou desativado"
	Else
		cRestFault := If( lBlocked, STR0038, STR0010 + " " + STR0012 ) //"Usuário bloqueado! Contate o administrador do sistema."
	EndIf
	lRetorno := .F.
EndIf

Return (Nil)
