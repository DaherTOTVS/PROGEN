#include "msobject.ch"
#include "totvs.framework.treports.integratedprovider.th"
#include "backoffice.sv.fin.receiptreportbyclient.ch"

namespace totvs.protheus.backoffice.fin.smartView.integratedProvider

@totvsFrameworkTReportsIntegratedProvider(active=.T., team="SIGAFIN", tables="SEL,SA1", name="Recibos por Cliente", country="ALL",;
    customTables="SEL,SA1")


//-------------------------------------------------------------------
/*/{Protheus.doc} ReceiptReportByClientSmartViewBusinessObject

@author Fábio Henrique Andrade
@since 01/11/2023
@version 1.0
*/
//-------------------------------------------------------------------  
class ReceiptReportByClientSmartViewBusinessObject from totvs.protheus.backoffice.fin.smartView.integratedProvider.FinIntegratedProvider
    public method new() as object

    protected data cCustomerFrom      as character
    protected data cCustomerTo        as character
    protected data cReceiptFrom       as character
    protected data cReceiptTo         as character
    protected data cReceiptSerieFrom  as character
    protected data cReceiptSerieTo    as character
    protected data dIssueDateFrom     as date
    protected data dIssueDateTo       as date
    protected data nCurrency          as numeric
    protected data nBankCurrency      as numeric
    protected data lListOtherCurrencies as logical 
    protected data lFilterByDate      as logical
    protected data cCurrentReceipt    as character

    protected data cCompanyName       as character
    protected data cCompanyAddress    as character
    protected data cCompanyDocument   as character
    protected data cCompanyZipCode    as character
    protected data cCompanyCity       as character
    protected data cCompanyEstate     as character
    protected data cCompanyTel        as character

    protected data aExchangeRatesFooter as array
    protected data aSymbolExchangeRatesFooter as array
    protected data cSymbolReportCurrency as character

    protected method initializeBusinessObject()
    protected method mySetSchema()
    protected method loadStatement() as character
    protected method handleData()
    protected method setDefaultParameters()
    protected method loadParameters()
    protected method convertMovementCurrency() as numeric
    protected method loadCompanyData() 
    protected method loadExchangeRates()
endclass

//-------------------------------------------------------------------
/*{Protheus.doc} new
Método de instância da classe
 
@return object: self
 
@author Fábio Henrique Andrade
@since 01/11/2023
@version 1.0
*/
//-------------------------------------------------------------------   
method new() class ReceiptReportByClientSmartViewBusinessObject
    _Super:new()
    self:initializeBusinessObject()
    
    self:setCompleteData(.T.)
    self:setAllTrim(.T.)

    self:loadParameters()
    self:loadCompanyData()
    self:cCurrentReceipt := ""
    self:cSymbolReportCurrency := ""
    self:aExchangeRatesFooter := {}
    self:aSymbolExchangeRatesFooter := {}
    self:lFilterByDate := .T.
    self:setMainTable("SEL")
    self:setBranchFilter(.T., .T.)
    
return self

//-------------------------------------------------------------------
/*{Protheus.doc} initializeBusinessObject
    @author guilhermed.santos@totvs.com.br
    @since 27/03/2024
    @version 12.1.2310
*/
//-------------------------------------------------------------------
method initializeBusinessObject() class ReceiptReportByClientSmartViewBusinessObject
    self:setDisplayName(STR0002) //"Recibos por Cliente"
    self:setDescription(STR0002) //"Recibos por Cliente"    
    self:setPergunte("FINT020")  
return


//-------------------------------------------------------------------
    /*{Protheus.doc} mySetSchema
    Determina a estrutura dos campos
    @author Fábio Henrique Andrade
    @since 01/11/2023
    @version 12.1.2310
    */
//-------------------------------------------------------------------
method mySetSchema() class ReceiptReportByClientSmartViewBusinessObject
    local aFieldsSEL := {} as array
    local aFieldsSA1 := {} as array

    aFieldsSEL := { "EL_RECIBO", "EL_SERIE", "EL_CLIORIG", "EL_LOJORIG","EL_DTDIGIT",; 
                    "EL_VALOR", "EL_DESCONT", "EL_TIPO", "EL_NATUREZ", "EL_TIPODOC",;
                    "EL_PREFIXO", "EL_NUMERO", "EL_PARCELA", "EL_MOEDA", "EL_TXMOEDA",;
                    "EL_TXMOE02", "EL_TXMOE03", "EL_TXMOE04", "EL_TXMOE05", "EL_VERSAO",;
                    "EL_BANCO", "EL_AGENCIA", "EL_CONTA", "EL_DTVCTO", "EL_EMISSAO", "EL_FILIAL" }
    aFieldsSA1 := { "A1_NOME", "A1_END", "A1_MUN", "A1_CGC" }

    self:oSchema:aliasToSchema("SEL", aFieldsSEL )
    self:oSchema:aliasToSchema("SA1", aFieldsSA1 )

    self:finAddProperty("DADOS_CLIENTE"        , STR0003, "string", "A1_NOME") //"Dados do Cliente"
    self:finAddProperty("CLASSIFICACAO"        , STR0004, "string") //"Classificação"
    self:finAddProperty("VALOR_CONVERTIDO"     , STR0005, "number") //"Vlr. Moeda Relatório"   
    self:finAddProperty("VALOR_RECEBIDO"       , STR0006, "number") //"Vlr. Recebido"
    self:finAddProperty("VALOR_COMPENSADO"     , STR0007, "number") //"Vlr. Compensado"
    self:finAddProperty("VALOR_ANTECIPADO"     , STR0008, "number") //"Vlr. Antecipado"
    self:finAddProperty("VALOR_DEPOSITO"       , STR0009, "number") //"Vlr. Depósito"
    self:finAddProperty("VALOR_CCREDITO"       , STR0010, "number") //"Vlr. Cartão Crédito"
    self:finAddProperty("VALOR_CDEBITO"        , STR0011, "number")//"Vlr. Cartão Débito"
    self:finAddProperty("VALOR_DINHEIRO"       , STR0012, "number") //"Vlr. em Dinheiro"
    self:finAddProperty("VALOR_DOCUMENTO"      , STR0013, "number") //"Vlr. Documento"
    self:finAddProperty("CHEQUE_ADIANTADO"     , STR0014, "number") //"Vlr. Cheque Adiantado"
    self:finAddProperty("CHEQUE_AO_DIA"        , STR0015, "number") //"Vlr. Cheque ao Dia"
    self:finAddProperty("VALOR_CHEQUE_DINHEIRO", STR0016, "number") //"Vlr. Cheque e Dinheiro"
    self:finAddProperty("TOTAL_RECEBIDO"       , STR0017, "number") //"Vlr. Total Recebido"
    self:finAddProperty("TOTAL_EXTENSO"        , STR0018, "string") //"Vlr. Total Extenso"
    self:finAddProperty("CONTAGEM_RECIBOS"     , STR0019, "number") //"Contagem de recibos"
    self:finAddProperty("VALOR_MULTA"          , STR0036, "number") //"Vlr. Multa"
    self:finAddProperty("VALOR_JUROS"          , STR0037, "number") //"Vlr. Juros"
    self:finAddProperty("VALOR_DESCONTO"       , STR0038, "number") //"Vlr. Desconto"

    //Dados da empresa para impressão do cabeçalho do design que substitui o FINR087
    self:finAddProperty("NOME_EMPRESA"     , STR0020, "string") //"Nome da Empresa"
    self:finAddProperty("ENDERECO_EMPRESA" , STR0021, "string") //"Endereço da Empresa"
    self:finAddProperty("CIDADE_EMPRESA"   , STR0022, "string") //"Cidade da Empresa"
    self:finAddProperty("TELEFONE_EMPRESA" , STR0023, "string") //"Telefone da Empresa"
    self:finAddProperty("CEP_EMPRESA"      , STR0024, "string") //"CEP da Empresa"
    self:finAddProperty("DOCUMENTO_EMPRESA", STR0025, "string") //"Documento da Empresa"
    self:finAddProperty("ESTADO_EMPRESA"   , STR0026, "string") //"Estado da Empresa"

    //Dados das taxas cambiais
    self:finAddProperty("CAMBIO_MOEDA2"    , STR0027, "number") //"Câmbio Moeda 2"
    self:finAddProperty("CAMBIO_MOEDA3"    , STR0028, "number") //"Câmbio Moeda 3"
    self:finAddProperty("CAMBIO_MOEDA4"    , STR0029, "number") //"Câmbio Moeda 4"
    self:finAddProperty("CAMBIO_MOEDA5"    , STR0030, "number") //"Câmbio Moeda 5"
    self:finAddProperty("SIMBOLO_MOEDA_REP", STR0031, "string") //"Símbolo Moeda Relatório"
    self:finAddProperty("SIMBOLO_MOEDA2"   , STR0032, "string") //"Símbolo Moeda 2"
    self:finAddProperty("SIMBOLO_MOEDA3"   , STR0033, "string") //"Símbolo Moeda 3"
    self:finAddProperty("SIMBOLO_MOEDA4"   , STR0034, "string") //"Símbolo Moeda 4"
    self:finAddProperty("SIMBOLO_MOEDA5"   , STR0035, "string") //"Símbolo Moeda 5"

return

//-------------------------------------------------------------------
/*{Protheus.doc} loadStatement
Preenche o objeto oStatement com a query principal do objeto de negócio.

@author Fábio Henrique Andrade Silva
@since 01/11/2023
@version 12.1.2310
*/
//-------------------------------------------------------------------
method loadStatement() as character class ReceiptReportByClientSmartViewBusinessObject
    local cQuery  := "" as character
    local nParamOrder := 1 as numeric
    local lVersao := .F. as logical
    local cVerDe := "" as character
    local cVerAte := "" as character

    self:loadFilterBranches({"SEL"})
    self:loadLGPDFields()

    // Verificar si es Argentina para manejar versiones
    if cPaisLoc == "ARG"
        lVersao := .T.
        cVerDe := MV_PAR03
        cVerAte := MV_PAR04
    endIf

    cQuery := " SELECT ? "
    cQuery += " , COALESCE(SA6.A6_MOEDA, 0) MOEDA_BANCO, "
    cQuery += " CASE "
    cQuery += "     WHEN SEL.EL_TIPODOC IN ('TB') THEN EL_VALOR "
    cQuery += "     ELSE 0 "
    cQuery += " END AS VALOR_RECEBIDO, "
    cQuery += " CASE "
    cQuery += "     WHEN SEL.EL_TIPODOC IN ('RA') THEN EL_VALOR "
    cQuery += "     ELSE 0 "
    cQuery += " END AS VALOR_ANTECIPADO, "
    cQuery += " CASE "
    cQuery += "     WHEN SEL.EL_TIPODOC = 'TF' THEN EL_VALOR "
    cQuery += "     ELSE 0 "
    cQuery += " END AS VALOR_DEPOSITO, "
    cQuery += " CASE "
    cQuery += "     WHEN SEL.EL_TIPODOC IN ('CC','TJ') THEN EL_VALOR "
    cQuery += "     ELSE 0 "
    cQuery += " END AS VALOR_CCREDITO, "
    cQuery += " CASE "
    cQuery += "     WHEN SEL.EL_TIPODOC = 'CD' THEN EL_VALOR "
    cQuery += "     ELSE 0 "
    cQuery += " END AS VALOR_CDEBITO, "
    cQuery += " CASE "
    cQuery += "     WHEN SEL.EL_TIPODOC = 'EF' THEN EL_VALOR "
    cQuery += "     ELSE 0 "
    cQuery += " END AS VALOR_DINHEIRO, "
    cQuery += " CASE "
    cQuery += "     WHEN SEL.EL_TIPODOC = 'DC' THEN EL_VALOR "
    cQuery += "     ELSE 0 "
    cQuery += " END AS VALOR_DOCUMENTO, "
    cQuery += " CASE "
    cQuery += "     WHEN SEL.EL_TIPODOC = 'CH' AND SEL.EL_EMISSAO < SEL.EL_DTVCTO THEN EL_VALOR "
    cQuery += "     ELSE 0 "
    cQuery += " END AS CHEQUE_ADIANTADO, "
    cQuery += " CASE "
    cQuery += "     WHEN SEL.EL_TIPODOC = 'CH' AND SEL.EL_EMISSAO >= SEL.EL_DTVCTO THEN EL_VALOR "
    cQuery += "     ELSE 0 "
    cQuery += " END AS CHEQUE_AO_DIA, "
    cQuery += " VREC.TOTAL_RECEBIDO "
    cQuery += " FROM ? SEL "
    cQuery += " INNER JOIN ? SA1 "
    cQuery += "     ON ? "
    cQuery += "     AND SA1.A1_COD = SEL.EL_CLIORIG "
    cQuery += "     AND SA1.A1_LOJA = SEL.EL_LOJORIG "
    cQuery += "     AND SA1.D_E_L_E_T_ = ? "
    cQuery += " INNER JOIN (SELECT "
    cQuery += "             EL_FILIAL, EL_RECIBO, EL_SERIE, EL_CLIORIG, EL_LOJORIG, SUM(EL_VLMOED1) TOTAL_RECEBIDO "
    cQuery += "         FROM ? "
    cQuery += "         WHERE "
    if self:lEmptyMultiBranches
        cQuery += "             EL_FILIAL = ? "
    else
        cQuery += "             EL_FILIAL IN (?) "
    endIf
    cQuery += "             AND EL_CLIORIG BETWEEN ? AND ? "
    cQuery += "             AND EL_LOJORIG BETWEEN ? AND ? "
    if self:lFilterByDate
        cQuery += "             AND EL_DTDIGIT BETWEEN ? AND ? "
    ENDIF
    cQuery += "             AND EL_RECIBO BETWEEN ? AND ? "
    cQuery += "             AND EL_SERIE BETWEEN ? AND ? "
    if lVersao
        cQuery += "             AND EL_VERSAO BETWEEN ? AND ? "
    endIf
    cQuery += "             AND EL_TIPODOC IN (?) "

    if !self:lListOtherCurrencies
        cQuery += " AND CAST(EL_MOEDA AS NUMERIC) = ? "
    endIf
    
    cQuery += "             AND D_E_L_E_T_ = ? "
    cQuery += "         GROUP BY "
    cQuery += "             EL_FILIAL, EL_RECIBO, EL_SERIE, EL_CLIORIG, EL_LOJORIG "
    cQuery += "         ) VREC ON "
    cQuery += "     VREC.EL_FILIAL = SEL.EL_FILIAL "
    cQuery += "     AND VREC.EL_RECIBO = SEL.EL_RECIBO "
    cQuery += "     AND VREC.EL_SERIE = SEL.EL_SERIE "
    cQuery += "     AND VREC.EL_CLIORIG = SEL.EL_CLIORIG "
    cQuery += "     AND VREC.EL_LOJORIG = SEL.EL_LOJORIG "
    cQuery += " LEFT JOIN ? SA6 ON ? "
    cQuery += "     AND SA6.A6_COD = SEL.EL_BANCO "
    cQuery += "     AND SA6.A6_AGENCIA = SEL.EL_AGENCIA "
    cQuery += "     AND SA6.A6_NUMCON = SEL.EL_CONTA "
    cQuery += "     AND SA6.D_E_L_E_T_ = ?" 
    cQuery += " WHERE "
    if self:lEmptyMultiBranches
        cQuery += " SEL.EL_FILIAL = ? "
    else
        cQuery += " SEL.EL_FILIAL in (?) "
    endIf
    cQuery += " AND SEL.EL_CLIORIG BETWEEN ? AND ? "
    cQuery += " AND SEL.EL_LOJORIG BETWEEN ? AND ? "
    if self:lFilterByDate
        cQuery += " AND SEL.EL_DTDIGIT BETWEEN ? AND ? "
    endIf
    cQuery += " AND SEL.EL_RECIBO BETWEEN ? AND ? "
    cQuery += " AND SEL.EL_SERIE BETWEEN ? AND ? "
    if lVersao
        cQuery += " AND SEL.EL_VERSAO BETWEEN ? AND ? "
    endIf
    if !self:lListOtherCurrencies
        cQuery += " AND CAST(EL_MOEDA AS NUMERIC) = ? "
    endIf
    
    cQuery += " AND SEL.D_E_L_E_T_ = ? "
    cQuery += " ? "
    cQuery += " ORDER BY SEL.EL_FILIAL, SEL.EL_RECIBO, SEL.EL_TIPODOC, SEL.EL_PREFIXO, "
    cQuery += " SEL.EL_NUMERO, SEL.EL_PARCELA, SEL.EL_TIPO, SEL.EL_VERSAO "

    cQuery := ChangeQuery(cQuery)

    self:oStatement := FWExecStatement():New(cQuery)

    self:oStatement:SetUnsafe(nParamOrder++,self:getAllFieldsToSQL())
    self:oStatement:SetUnsafe(nParamOrder++,RetSQLName("SEL"))
    self:oStatement:SetUnsafe(nParamOrder++,RetSQLName("SA1"))
    self:oStatement:SetUnsafe(nParamOrder++, FWJoinFilial("SA1", "SEL"))
    self:oStatement:SetString(nParamOrder++, ' ')

    //Subquery
    self:oStatement:SetUnsafe(nParamOrder++,RetSQLName("SEL"))
    if self:lEmptyMultiBranches
        self:oStatement:SetString(nParamOrder++, self:oFilterBranches["SEL"][1])
    else
        self:oStatement:SetIn(nParamOrder++, self:oFilterBranches["SEL"][1])
    endIf
    self:oStatement:SetString(nParamOrder++, self:cCustomerFrom)
    self:oStatement:SetString(nParamOrder++, self:cCustomerTo)
    self:oStatement:SetString(nParamOrder++, ' ')
    self:oStatement:SetString(nParamOrder++, 'ZZZZ')
    if self:lFilterByDate
        self:oStatement:SetDate(nParamOrder++, self:dIssueDateFrom)
        self:oStatement:SetDate(nParamOrder++, self:dIssueDateTo)
    endIf
    self:oStatement:SetString(nParamOrder++, self:cReceiptFrom)
    self:oStatement:SetString(nParamOrder++, self:cReceiptTo)
    self:oStatement:SetString(nParamOrder++, self:cReceiptSerieFrom)
    self:oStatement:SetString(nParamOrder++, self:cReceiptSerieTo)
    if lVersao
        self:oStatement:SetString(nParamOrder++, cVerDe)
        self:oStatement:SetString(nParamOrder++, cVerAte)
    endIf

    self:oStatement:SetIn(nParamOrder++, {'TB','RA'})

    if !self:lListOtherCurrencies
        self:oStatement:SetNumeric(nParamOrder++, self:nCurrency)
    endIf

    self:oStatement:SetString(nParamOrder++, ' ')
    self:oStatement:SetUnsafe(nParamOrder++,RetSQLName("SA6"))
    self:oStatement:SetUnsafe(nParamOrder++, FWJoinFilial("SA6", "SEL"))
    self:oStatement:SetString(nParamOrder++, ' ')

    //Query Principal
    if self:lEmptyMultiBranches
        self:oStatement:SetString(nParamOrder++, self:oFilterBranches["SEL"][1])
    else
        self:oStatement:SetIn(nParamOrder++, self:oFilterBranches["SEL"][1])
    endIf
    self:oStatement:SetString(nParamOrder++, self:cCustomerFrom)
    self:oStatement:SetString(nParamOrder++, self:cCustomerTo)
    self:oStatement:SetString(nParamOrder++, ' ')
    self:oStatement:SetString(nParamOrder++, 'ZZZZZ')
    if self:lFilterByDate
        self:oStatement:SetDate(nParamOrder++, self:dIssueDateFrom)
        self:oStatement:SetDate(nParamOrder++, self:dIssueDateTo)
    endIf
    self:oStatement:SetString(nParamOrder++, self:cReceiptFrom)
    self:oStatement:SetString(nParamOrder++, self:cReceiptTo)
    self:oStatement:SetString(nParamOrder++, self:cReceiptSerieFrom)
    self:oStatement:SetString(nParamOrder++, self:cReceiptSerieTo)
    if lVersao
        self:oStatement:SetString(nParamOrder++, cVerDe)
        self:oStatement:SetString(nParamOrder++, cVerAte)
    endIf
 
    if !self:lListOtherCurrencies
        self:oStatement:SetNumeric(nParamOrder++, self:nCurrency)
    endIf

    self:oStatement:SetString(nParamOrder++, ' ')
    self:oStatement:SetUnsafe(nParamOrder++, self:getFilterToSQL())
       
return

//-------------------------------------------------------------------
/*{Protheus.doc} handleData
@author Fábio Henrique Andrade Silva
@since 01/11/2023
@version 12.1.2310
*/
//-------------------------------------------------------------------
method handleData() class ReceiptReportByClientSmartViewBusinessObject
    local nConvertByReportCurrency := 1 as numeric
    local nValMulta := 0 as numeric
    local nValJuros := 0 as numeric
    local nDesconto := 0 as numeric
    local lVersao := .F. as logical
    
    // Verificar si es Argentina para manejar versiones
    if cPaisLoc == "ARG"
        lVersao := .T.
    endIf

    self:jData["DADOS_CLIENTE"] := AllTrim((self:cAlias)->EL_CLIORIG) + "/" + AllTrim((self:cAlias)->EL_LOJORIG) + "-" + AllTrim((self:cAlias)->A1_NOME)
    self:jData["A1_CGC"] := self:transformCGC((self:cAlias)->A1_CGC)

    if (self:cAlias)->EL_TIPODOC == "RA"
        self:jData["CLASSIFICACAO"] := STR0038 //"RECEBIMENTOS ANTECIPADOS"
    elseif (self:cAlias)->VALOR_RECEBIDO > 0
        self:jData["CLASSIFICACAO"] := STR0036 //"TITULOS RECEBIDOS"
    else
        self:jData["CLASSIFICACAO"] := STR0037 //"ENTRADAS"
    endIf
    
    self:jData["VALOR_CONVERTIDO"] := self:convertMovementCurrency((self:cAlias)->EL_VALOR)
    if !((self:cAlias)->EL_TIPO $ MV_CRNEG+"|"+MVRECANT)
        self:jData["VALOR_RECEBIDO"]   := self:convertMovementCurrency((self:cAlias)->VALOR_RECEBIDO)
        self:jData["VALOR_COMPENSADO"] := 0
    else
        self:jData["VALOR_RECEBIDO"]   := 0
        self:jData["VALOR_COMPENSADO"] := self:convertMovementCurrency((self:cAlias)->VALOR_RECEBIDO)
    endIf
    self:jData["VALOR_ANTECIPADO"] := self:convertMovementCurrency((self:cAlias)->VALOR_ANTECIPADO)
    self:jData["VALOR_DEPOSITO"]   := self:convertMovementCurrency((self:cAlias)->VALOR_DEPOSITO)
    self:jData["VALOR_CCREDITO"]   := self:convertMovementCurrency((self:cAlias)->VALOR_CCREDITO)
    self:jData["VALOR_CDEBITO"]    := self:convertMovementCurrency((self:cAlias)->VALOR_CDEBITO)
    self:jData["VALOR_DINHEIRO"]   := self:convertMovementCurrency((self:cAlias)->VALOR_DINHEIRO)
    self:jData["VALOR_DOCUMENTO"]  := self:convertMovementCurrency((self:cAlias)->VALOR_DOCUMENTO)
    self:jData["CHEQUE_ADIANTADO"] := self:convertMovementCurrency((self:cAlias)->CHEQUE_ADIANTADO)
    self:jData["CHEQUE_AO_DIA"]    := self:convertMovementCurrency((self:cAlias)->CHEQUE_AO_DIA)
    self:jData["TOTAL_RECEBIDO"]   := self:convertMovementCurrency((self:cAlias)->TOTAL_RECEBIDO, nConvertByReportCurrency)
    self:jData["TOTAL_EXTENSO"]    := AllTrim(Extenso(self:jData["TOTAL_RECEBIDO"]))
    self:jData["VALOR_CHEQUE_DINHEIRO"] := self:jData["CHEQUE_ADIANTADO"] + self:jData["CHEQUE_AO_DIA"] + self:jData["VALOR_DINHEIRO"]
    self:jData["CONTAGEM_RECIBOS"] := 0

    if self:cCurrentReceipt <> (self:cAlias)->EL_FILIAL + self:jData["DADOS_CLIENTE"] + AllTrim((self:cAlias)->EL_RECIBO)
        self:jData["CONTAGEM_RECIBOS"] := 1
        self:cCurrentReceipt := (self:cAlias)->EL_FILIAL + self:jData["DADOS_CLIENTE"] + AllTrim((self:cAlias)->EL_RECIBO)
        self:aExchangeRatesFooter := {}
        self:aSymbolExchangeRatesFooter := {}
        self:loadExchangeRates()
    endIf

    // Si es un título, buscar multas, juros y descuentos en SE5
    if (self:cAlias)->EL_TIPODOC == "TB"
        nValMulta := 0 
        nValJuros := 0
        nDesconto := 0
        SE5->(DbSetOrder(8))
        SE5->(DbSeek(xFilial("SE5")+ (self:cAlias)->EL_RECIBO))
        While !EOF() .and. (self:cAlias)->EL_RECIBO == SE5->E5_ORDREC
            If SE5->E5_PREFIXO == (self:cAlias)->EL_PREFIXO .And.;
               SE5->E5_NUMERO == (self:cAlias)->EL_NUMERO .And.;
               SE5->E5_PARCELA == (self:cAlias)->EL_PARCELA .And.;
               SE5->E5_TIPO == (self:cAlias)->EL_TIPO .And.;
               SE5->E5_CLIFOR == (self:cAlias)->EL_CLIORIG .And.;
               SE5->E5_LOJA == (self:cAlias)->EL_LOJORIG
                If SE5->E5_TIPODOC == "MT"
                    nValMulta := SE5->E5_VALOR
                ElseIf SE5->E5_TIPODOC == "JR"            
                    nValJuros := SE5->E5_VALOR
                ElseIf SE5->E5_TIPODOC == "DC"            
                    nDesconto := SE5->E5_VALOR
                EndIf
            EndIf    
            SE5->(Dbskip())
        EndDo

        // Agregar los valores al JSON
        self:jData["VALOR_MULTA"] := self:convertMovementCurrency(nValMulta)
        self:jData["VALOR_JUROS"] := self:convertMovementCurrency(nValJuros)
        self:jData["VALOR_DESCONTO"] := self:convertMovementCurrency(nDesconto)
    else
        self:jData["VALOR_MULTA"] := 0
        self:jData["VALOR_JUROS"] := 0
        self:jData["VALOR_DESCONTO"] := 0
    endIf

    //Dados da empresa para impressão do cabeçalho do design que substitui o FINR087
    self:jData["NOME_EMPRESA"]      := self:cCompanyName
    self:jData["ENDERECO_EMPRESA"]  := self:cCompanyAddress
    self:jData["CEP_EMPRESA"]       := self:cCompanyZipCode
    self:jData["CIDADE_EMPRESA"]    := self:cCompanyCity
    self:jData["TELEFONE_EMPRESA"]  := self:cCompanyTel
    self:jData["DOCUMENTO_EMPRESA"] := self:cCompanyDocument
    self:jData["ESTADO_EMPRESA"]    := self:cCompanyEstate

    //Dados das taxas cambiais para o rodapé do design que substitui o FINR087
    self:jData["CAMBIO_MOEDA2"]     := self:aExchangeRatesFooter[2]
    self:jData["CAMBIO_MOEDA3"]     := self:aExchangeRatesFooter[3]
    self:jData["CAMBIO_MOEDA4"]     := self:aExchangeRatesFooter[4]
    self:jData["CAMBIO_MOEDA5"]     := self:aExchangeRatesFooter[5]
    self:jData["SIMBOLO_MOEDA2"]    := self:aSymbolExchangeRatesFooter[2]
    self:jData["SIMBOLO_MOEDA3"]    := self:aSymbolExchangeRatesFooter[3]
    self:jData["SIMBOLO_MOEDA4"]    := self:aSymbolExchangeRatesFooter[4]
    self:jData["SIMBOLO_MOEDA5"]    := self:aSymbolExchangeRatesFooter[5]
    self:jData["SIMBOLO_MOEDA_REP"] := self:cSymbolReportCurrency

return

/*/{Protheus.doc} loadParameters
    @author Fábio Henrique Andrade
    @since 01/11/2023
    @version 12.1.2310
*/
method loadParameters() class ReceiptReportByClientSmartViewBusinessObject   
    if self:oCurrentFilter  == NIL
        self:setDefaultParameters()
    else
        self:cCustomerFrom        := MV_PAR01
        self:cCustomerTo          := MV_PAR02
        self:cReceiptFrom         := MV_PAR03
        self:cReceiptTo           := MV_PAR04
        self:cReceiptSerieFrom    := MV_PAR05
        self:cReceiptSerieTo      := MV_PAR06
        self:dIssueDateFrom       := MV_PAR07
        self:dIssueDateTo         := MV_PAR08
        self:nCurrency            := MV_PAR09
        self:lListOtherCurrencies := !(MV_PAR10 == 1)
        self:cSymbolReportCurrency := AllTrim(GetMv("MV_SIMB"+STR(self:nCurrency,1)))
    endIf
return

/*/{Protheus.doc} setDefaultParameters
    @author Fábio Henrique Andrade
    @since 01/11/2023
    @version 12.1.2310
*/
method setDefaultParameters() class ReceiptReportByClientSmartViewBusinessObject
    self:cCustomerFrom      := ""
    self:cCustomerTo        := "ZZZ"
    self:cReceiptFrom       := ""
    self:cReceiptTo         := "ZZZ"
    self:cReceiptSerieFrom  := ""
    self:cReceiptSerieTo    := "ZZZ"
    self:dIssueDateFrom     := dDatabase
    self:dIssueDateTo       := dDatabase
    self:nCurrency          := 1
    self:lListOtherCurrencies := .T.
return

//----------------------------------------------------------------
/*/{Protheus.doc}convertMovementCurrency
    @author Fábio Henrique Andrade
    @since 03/11/2023
    @version 12.1.2310
/*/
//-----------------------------------------------------------------
method convertMovementCurrency(nValue as numeric, nReportCurrency as numeric) as numeric class ReceiptReportByClientSmartViewBusinessObject
    local dConversionDate := dDatabase as date
    local nExchangeRate := 0 as numeric
    local nOriginFee := 0 as numeric
    local nDestinationFee := 0 as numeric
    local aExchangeRates := { "EL_TXMOEDA","EL_TXMOE02","EL_TXMOE03","EL_TXMOE04","EL_TXMOE05" }
    local nMovementCurrency := VAL( (self:cAlias)->EL_MOEDA )
    default nReportCurrency := 0

    if nReportCurrency > 0
        nMovementCurrency := nReportCurrency
    endIf

    dConversionDate := (self:cAlias)->EL_DTDIGIT
    nExchangeRate := (self:cAlias)->&(aExchangeRates[nMovementCurrency])

    if nMovementCurrency == 1
        nDestinationFee := nExchangeRate
    else
        nOriginFee := nExchangeRate
    endIf
    
    nValue := xMoeda(nValue, nMovementCurrency, self:nCurrency, dConversionDate, self:nDecimals, nOriginFee, nDestinationFee)
return nValue

//----------------------------------------------------------------
/*/{Protheus.doc}loadCompanyData
    @author Fábio Henrique Andrade
    @since 08/11/2023
    @version 12.1.2310
/*/
//-----------------------------------------------------------------
method loadCompanyData() class ReceiptReportByClientSmartViewBusinessObject
    local aCompanyData := FWSM0Util():GetSM0Data() as array
    self:cCompanyName       := AllTrim(aCompanyData[aScan(aCompanyData, {|x| AllTrim(Upper(x[1])) == "M0_NOMECOM"})][2])
    self:cCompanyAddress    := AllTrim(aCompanyData[aScan(aCompanyData, {|x| AllTrim(Upper(x[1])) == "M0_ENDENT"})][2])
    self:cCompanyCity       := AllTrim(aCompanyData[aScan(aCompanyData, {|x| AllTrim(Upper(x[1])) == "M0_CIDENT"})][2])
    self:cCompanyEstate     := AllTrim(aCompanyData[aScan(aCompanyData, {|x| AllTrim(Upper(x[1])) == "M0_ESTENT"})][2])
    self:cCompanyDocument   := self:transformCGC(aCompanyData[aScan(aCompanyData, {|x| AllTrim(Upper(x[1])) == "M0_CGC"})][2])
    self:cCompanyTel        := AllTrim(aCompanyData[aScan(aCompanyData, {|x| AllTrim(Upper(x[1])) == "M0_TEL"})][2])
    self:cCompanyZipCode    := AllTrim(aCompanyData[aScan(aCompanyData, {|x| AllTrim(Upper(x[1])) == "M0_CEPENT"})][2])
return 

//----------------------------------------------------------------
/*/{Protheus.doc}loadExchangeRates
    @author Fábio Henrique Andrade
    @since 08/11/2023
    @version 12.1.2310
/*/
//-----------------------------------------------------------------
method loadExchangeRates() class ReceiptReportByClientSmartViewBusinessObject
    local nIdx := 1 as numeric

    aAdd(self:aExchangeRatesFooter, 0)
    aAdd(self:aSymbolExchangeRatesFooter,"")
    aAdd(self:aSymbolExchangeRatesFooter,PADL(SuperGetMv("MV_SIMB2"),4))
    aAdd(self:aSymbolExchangeRatesFooter,PADL(SuperGetMv("MV_SIMB3"),4))
    aAdd(self:aSymbolExchangeRatesFooter,PADL(SuperGetMv("MV_SIMB4"),4))
    aAdd(self:aSymbolExchangeRatesFooter,PADL(SuperGetMv("MV_SIMB5"),4))

    for nIdx := 2 to 5
        aAdd(self:aExchangeRatesFooter,MAX(RecMoeda((self:cAlias)->EL_DTDIGIT,StrZero(nIdx,1)),1))
    next nIdx

return 
