#include "msobject.ch"
#include "protheus.ch"
#include "backoffice.sv.est.analysisofmovement.ch"
#include "totvs.framework.treports.integratedprovider.th"

//Grupo de perguntas 
#define SX1GRUPO "ESTT018"

using namespace totvs.framework.treports.integratedprovider

namespace totvs.protheus.backoffice.est.analysisofmovement.integratedprovider

@TotvsFrameworkTReportsIntegratedProvider(active=.T., team="SIGAEST", tables="SB1",name="Análise de Movimentação", country="ALL")

//-------------------------------------------------------------------
/*{Protheus.doc} AnalysisofMovementSmartViewBusinessObject
Classe para criação do Objeto de Negócio de Kardex por Lote/Sub-Lote

@author Squad Entradas
@since 06/2023
@version 1.0
*/
//-------------------------------------------------------------------  
Class AnalysisofMovementSmartViewBusinessObject From IntegratedProvider

	Public Method new() as object
	Public Method getData() as object
	Public Method getSchema() as object

	Protected data jItems	  as Json
	Protected data cWhereSD1  as Character
	Protected data cWhereSD2  as Character
	Protected data cWhereSD3  as Character
	Protected data cWhereSB1  as Character
	Protected data lExistPerg as Logical

EndClass

//-------------------------------------------------------------------
/*{Protheus.doc} new
Método de instância da classe

@return object: self
 
@author Squad Entradas
@since 06/2023
@version 1.0
*/
//-------------------------------------------------------------------   
Method new() Class AnalysisofMovementSmartViewBusinessObject

	_Super:new()

	//Define a Área
	self:appendArea( STR0001 ) //"Estoque/Custos"

	//Define o nome do Objeto de Negócio
	self:setDisplayName( STR0002 ) //"Analise da Movimentacao"

	//Define a descrição do Objeto de Negócio
	self:setDescription( STR0003 ) //"Analise da Movimentação este relatório emite a análise da movimentação dos estoques dos produtos num determinado período, sendo que este deve estar registrados nos arquivos de movimentação."

    //Indica o pergunte que será utilizado no relatório
	self:lExistPerg := self:setPergunte( SX1GRUPO )
	If !self:lExistPerg
		self:setErrorStatus(400,STR0011,i18n(STR0012,{SX1GRUPO})) //"Sem Pergunte" -- "Grupo de perguntas #1[SX1GRUPO]# nao encontrado. Verifique na tabela SX1, o grupo de perguntas informado"
		FWLogMsg('WARN', , 'SmartView', , , , i18n(STR0012,{SX1GRUPO}), , , ) //"Grupo de perguntas #1[SX1GRUPO]# nao encontrado. Verifique na tabela SX1, o grupo de perguntas informado"
	EndIf


	//Indica que o LookUp será do tipo padrão LookUp
    self:setIsLookUp(.T.)

Return self

//-------------------------------------------------------------------
/*{Protheus.doc} getData
Retorna os dados do objeto de negócio
 
@param nPage, numérico, indica a página atual do relatório
@param oFilter, objeto, contém o filtro do Smart View
 
@return object: self:oData
 
@author Squad Entradas
@since 06/2023
@version 1.0
*/
//-------------------------------------------------------------------   
Method getData( nPage as Numeric, oFilter as object) as object Class AnalysisofMovementSmartViewBusinessObject

	Local dDataDe		as Date
	Local dDataAte		as Date
	Local jParams		as Json
	Local aProd			as Array
	Local aVars			as Array
	Local aSaldo		as Array
	Local lMov			as Logical
	Local lVeic			as Logical
	Local nX			as Numeric
	Local nLen			as Numeric
	Local nSiVl			as Numeric
	Local nSiQt			as Numeric
	Local nQtCo			as Numeric
	Local nVlCo			as Numeric
	Local nSkip			as Numeric
	Local nCount		as Numeric
	Local nVlMed		as Numeric
	Local nQtMed		as Numeric
	Local cMoeda		as Character
	Local cQuery		as Character
	Local cFilExec		as character
	Local cEmpExec		as character
	Local cProduto		as Character
	Local cAliasTmp		as Character
	Local cFiltro       as Character
	Local oQuery        as Object

	lVeic  := Upper(GetMV("MV_VEICULO"))=="S"

	//Valida o pergunte
	If !self:lExistPerg
		return self:oData
	Endif

	//Variáveis com o nome da Filial e Grupo de Empresa
	cFilExec := AllTrim(FWFilialName())
	cEmpExec := AllTrim(FWEmpName(cEmpAnt))
	cFiltro  := " AND "
    //Define a quantidade máxima por página (Default 100)
    self:setPageSize(100)

	//--------------------------------------------------------------------------
	// Variaveis utilizadas para parametros no grupo de pergunta ESTT018
	//--------------------------------------------------------------------------
	// MV_PAR01 - Periodo de ?
	// MV_PAR02 - Periodo ate ?
	// MV_PAR03 - Produto de ?
	// MV_PAR04 - Produto ate ?
	// MV_PAR05 - Armazem de ?
	// MV_PAR06 - Armazem ate ?
	// MV_PAR07 - Qual a moeda ?
	// MV_PAR08 - Tipo de ?
	// MV_PAR09 - Tipo ate ?
	// MV_PAR10 - Lista Prod. Sem Mov ?
	//--------------------------------------------------------------------------
	jParams := oFilter:getParameters() //metodo para retorno do json dos parâmetros
	
	nCount := 0

	cMoeda   := StrZero(jParams["MV_PAR07"][1],1,0)

	dDataDe  := FwDateTimeToLocal( jParams['MV_PAR01'][1] )[1]
	dDataAte := FwDateTimeToLocal( jParams['MV_PAR02'][1] )[1]

	cQuery := " SELECT 'SD1' ARQ,"		//01 - ARQUIVO
	cQuery += " SB1.B1_COD PRODUTO,"	//02 - PRODUTO
	cQuery += " SB1.B1_TIPO TIPO,"		//03 - TIPO
	cQuery += " SB1.B1_UM UM,"			//04 - UM
	cQuery += " SB1.B1_GRUPO GRUPO,"	//05 - GRUPO
	cQuery += " SB1.B1_DESC DESCR,"		//06 - DESCRICAO
	cQuery += " SB1.B1_CODITE CODITE,"	//07 - CODITE
	cQuery += " D1_DTDIGIT DTAUX,"		//08 - DATA
	cQuery += " D1_TES TES,"			//09 - TES
	cQuery += " D1_CF CF,"				//10 - CF
	cQuery += " D1_NUMSEQ SEQUENCIA,"	//11 - SEQUENCIA
	cQuery += " D1_DOC DOCUMENTO,"		//12 - DOCUMENTO	
	cQuery += " D1_SERIE SERIE,"		//13 - SERIE
	cQuery += " D1_QUANT QUANTIDADE,"	//14 - QUANTIDADE
	cQuery += " D1_QTSEGUM QUANT2UM,"	//14 - QUANT2UM
	cQuery += " D1_LOCAL ARMAZEM,"		//15 - ARMAZEM
	cQuery += " ' ' OP,"				//16 - OP
	cQuery += " D1_FORNECE FORNECEDOR,"	//17 - FORNECEDOR	
	cQuery += " D1_LOJA LOJA,"			//18 - LOJA
	cQuery += " D1_TIPO TIPONF,"		//19 - TIPONF
	cQuery += " D1_REMITO REMITO,"		//20 - REMITO
	cQuery += " ' ' TPDCENV,"			//21 - TPDCENV
	cQuery += " D1_CUSTO CUSTO1,"		//22 - CUSTO1
	cQuery += " D1_CUSTO2 CUSTO2,"		//23 - CUSTO2
	cQuery += " D1_CUSTO3 CUSTO3,"		//24 - CUSTO3
	cQuery += " D1_CUSTO4 CUSTO4,"		//25 - CUSTO4
	cQuery += " D1_CUSTO5 CUSTO5,"		//26 - CUSTO5
	cQuery += " SD1.R_E_C_N_O_ NRECNO"	//27 RECNO

	cQuery += " FROM " + RetSQLName( 'SB1' ) + " SB1"

	cQuery += " JOIN " + RetSQLName( 'SF4' ) + " SF4"
	cQuery += " ON  SF4.F4_FILIAL  =  ? "
	cQuery += " AND	SF4.F4_ESTOQUE =  ? "
	cQuery += " AND SF4.D_E_L_E_T_ =  ? "

	cQuery += " JOIN " + RetSQLName( 'SD1' ) + " SD1"
	cQuery += " ON SD1.D1_FILIAL    = ? "
	cQuery += " AND SD1.D1_TES      =  SF4.F4_CODIGO"
	cQuery += " AND	SD1.D1_DTDIGIT >= ? "
	cQuery += " AND	SD1.D1_DTDIGIT <= ? "
	cQuery += " AND	SD1.D1_LOCAL   >= ? "
	cQuery += " AND	SD1.D1_LOCAL   <= ? "
	cQuery += " AND	SD1.D1_ORIGLAN <> ? "
	cQuery += " AND	SD1.D_E_L_E_T_ = ? "
 	cQuery += " ? " 
	cQuery += " WHERE SB1.B1_FILIAL = ? "
	cQuery += " AND	SB1.B1_COD      =  SD1.D1_COD"
	cQuery += " AND	SB1.B1_COD	   >= ? "
	cQuery += " AND	SB1.B1_COD	   <= ? "
	cQuery += " AND	SB1.B1_TIPO	   >= ? "
	cQuery += " AND	SB1.B1_TIPO	   <= ? "
	cQuery += " AND SB1.D_E_L_E_T_ =  ? "

	cQuery += " UNION "

	cQuery += " SELECT 	'SD2' ARQ,"
	cQuery += " SB1.B1_COD PRODUTO,"
	cQuery += " SB1.B1_TIPO TIPO,"
	cQuery += " SB1.B1_UM UM,"
	cQuery += " SB1.B1_GRUPO GRUPO,"
	cQuery += " SB1.B1_DESC DESCR,"
	cQuery += " ' ' CODITE,"
	cQuery += " D2_EMISSAO DTAUX,"
	cQuery += " D2_TES TES,"
	cQuery += " D2_CF CF,"
	cQuery += " D2_NUMSEQ SEQUENCIA,"
	cQuery += " D2_DOC DOCUMENTO,"
	cQuery += " D2_SERIE SERIE,"
	cQuery += " D2_QUANT QUANTIDADE,"
	cQuery += " D2_QTSEGUM QUANT2UM,"
	cQuery += " D2_LOCAL ARMAZEM,"
	cQuery += " ' ' OP,"
	cQuery += " D2_CLIENTE FORNECEDOR,"
	cQuery += " D2_LOJA LOJA,"
	cQuery += " D2_TIPO TIPONF,"
	cQuery += " D2_REMITO REMITO,"
	cQuery += " D2_TPDCENV TPDCENV,"
	cQuery += " D2_CUSTO1 CUSTO1,"
	cQuery += " D2_CUSTO2 CUSTO2,"
	cQuery += " D2_CUSTO3 CUSTO3,"
	cQuery += " D2_CUSTO4 CUSTO4,"
	cQuery += " D2_CUSTO5 CUSTO5,"
	cQuery += " SD2.R_E_C_N_O_ SD2RECNO "
			
	cQuery += " FROM " + RetSQLName( 'SB1' ) + " SB1"

	cQuery += " JOIN " + RetSQLName( 'SF4' ) + " SF4"
	cQuery += " ON  SF4.F4_FILIAL	=  ? "
	cQuery += " AND	SF4.F4_ESTOQUE 	=  ? "
	cQuery += " AND SF4.D_E_L_E_T_  =  ? "

	cQuery += " JOIN " + RetSQLName( 'SD2' ) + " SD2"
	cQuery += " ON  SD2.D2_FILIAL   =  ? "
	cQuery += " AND SD2.D2_TES 		=  SF4.F4_CODIGO "
	cQuery += " AND SD2.D2_EMISSAO >= ? "
	cQuery += " AND	SD2.D2_EMISSAO <= ? "
	cQuery += " AND SD2.D2_ORIGLAN <> ? "
	cQuery += " AND	SD2.D2_LOCAL   >= ? "
	cQuery += " AND SD2.D2_LOCAL   <= ? "
	cQuery += " AND	SD2.D_E_L_E_T_  = ? "
  	cQuery += " ? "
	cQuery += " WHERE SB1.B1_FILIAL  = ? "
	cQuery += " AND	SB1.B1_COD       =  SD2.D2_COD "
	cQuery += " AND SB1.B1_COD      >= ? "
	cQuery += " AND	SB1.B1_COD	    <= ? "
	cQuery += " AND SB1.B1_TIPO     >= ? "
	cQuery += " AND SB1.B1_TIPO     <= ? "
	cQuery += " AND SB1.D_E_L_E_T_  = ?  "

	cQuery += " UNION "
		
	cQuery += " SELECT 	'SD3' ARQ,"
	cQuery += " SB1.B1_COD PRODUTO,"
	cQuery += " SB1.B1_TIPO TIPO,"
	cQuery += " SB1.B1_UM UM, "
	cQuery += " SB1.B1_GRUPO GRUPO,"
	cQuery += " SB1.B1_DESC DESCR,"
	cQuery += " ' ' CODITE,"
	cQuery += " D3_EMISSAO DTAUX,"
	cQuery += " D3_TM TES,"
	cQuery += " D3_CF CF,"
	cQuery += " D3_NUMSEQ SEQUENCIA,"
	cQuery += " D3_DOC DOCUMENTO,"
	cQuery += " ' ' SERIE,"
	cQuery += " D3_QUANT QUANTIDADE,"
	cQuery += " D3_QTSEGUM QUANT2UM,"
	cQuery += " D3_LOCAL ARMAZEM,"
	cQuery += " D3_OP OP,"
	cQuery += " ' ' FORNECEDOR,"
	cQuery += " ' ' LOJA,"
	cQuery += " ' ' TIPONF,"
	cQuery += " ' ' REMITO,"
	cQuery += " ' ' TPDCENV,"
	cQuery += " D3_CUSTO1 CUSTO1,"
	cQuery += " D3_CUSTO2 CUSTO2,"
	cQuery += " D3_CUSTO3 CUSTO3,"
	cQuery += " D3_CUSTO4 CUSTO4,"
	cQuery += " D3_CUSTO5 CUSTO5,"
	cQuery += " SD3.R_E_C_N_O_ SD3RECNO "

	cQuery += " FROM " + RetSQLName( 'SB1' ) + " SB1"

	cQuery += " JOIN " + RetSQLName( 'SD3' ) + " SD3"
	cQuery += " ON  SD3.D3_FILIAL	= ? "
	cQuery += " AND	SD3.D3_COD		=  SB1.B1_COD"
	cQuery += " AND SD3.D3_EMISSAO >= ? "
	cQuery += " AND	SD3.D3_EMISSAO <= ? "
	cQuery += " AND SD3.D3_LOCAL   >= ? "
	cQuery += " AND	SD3.D3_LOCAL   <= ? "
	cQuery += " AND SD3.D3_ESTORNO <> ? "
	cQuery += " AND	SD3.D_E_L_E_T_ = ?  "
   	cQuery += " ? "
	cQuery += " WHERE SB1.B1_FILIAL = ? "
	cQuery += " AND	SB1.B1_TIPO    >= ? "
	cQuery += " AND SB1.B1_TIPO    <= ? "
	cQuery += " AND	SB1.B1_COD	   >= ? "
	cQuery += " AND SB1.B1_COD	   <= ? "
	cQuery += " AND	SB1.D_E_L_E_T_  = ? "

	cQuery += " UNION "
		
	cQuery += " SELECT 	'SB1' ARQ,"
	cQuery += " SB1.B1_COD PRODUTO,"
	cQuery += " SB1.B1_TIPO TIPO,"
	cQuery += " SB1.B1_UM UM,"
	cQuery += " SB1.B1_GRUPO GRUPO,"
	cQuery += " SB1.B1_DESC DESCR,"
	cQuery += " ' ' CODITE,"
	cQuery += " ' ' DTAUX,"
	cQuery += " ' ' TES,"
	cQuery += " ' ' CF,"
	cQuery += " ' ' SEQUENCIA,"
	cQuery += " ' ' DOCUMENTO,"
	cQuery += " ' ' SERIE,"
	cQuery += " 0 QUANTIDADE,"
	cQuery += " 0 QUANT2UM,"
	cQuery += " ' ' ARMAZEM,"
	cQuery += " ' ' OP,"
	cQuery += " ' ' FORNECEDOR,"
	cQuery += " ' ' LOJA,"
	cQuery += " ' ' TIPONF,"
	cQuery += " ' ' REMITO,"
	cQuery += " ' ' TPDCENV,"
	cQuery += " 0 CUSTO1,"
	cQuery += " 0 CUSTO2,"
	cQuery += " 0 CUSTO3,"
	cQuery += " 0 CUSTO4,"
	cQuery += " 0 CUSTO5,"
	cQuery += " 0 SB1RECNO "

	cQuery += " FROM " + RetSQLName( 'SB1' ) + " SB1 "

	cQuery += " WHERE SB1.B1_FILIAL = ? "
	cQuery += " AND SB1.B1_COD     >= ? "
	cQuery += " AND SB1.B1_COD     <= ? "
	cQuery += " AND SB1.B1_TIPO    >= ? "
	cQuery += " AND SB1.B1_TIPO    <= ? "
	cQuery += " AND	SB1.B1_LOCPAD  >= ? "
	cQuery += " AND SB1.B1_LOCPAD  <= ? "
	cQuery += " AND SB1.D_E_L_E_T_  = ? "
 	cQuery += " ? " 

	//Os filtros serão setados na interface do Smart View
	If !(oFilter:hasFilter())
		cFiltro := ""  
	Endif
	cQuery += " ? " 
	If !lVeic
		cQuery += " ORDER BY 2,3,1,8,11"
	Else
		cQuery += " ORDER BY 7,3,1,8,11"
	EndIf

	cQuery := changeQuery(cQuery)
	oQuery := FwExecStatement():New(cQuery)
	//Binding
	oQuery:setString(1,FWxFilial("SF4"))
	oQuery:setString(2,'S')
	oQuery:setString(3,' ')
	oQuery:setString(4,FWxFilial("SD1"))
	oQuery:setString(5,Dtos(dDataDe))
	oQuery:setString(6,Dtos(dDataAte))
	oQuery:setString(7,jParams['MV_PAR05'][1])	
	oQuery:setString(8,jParams['MV_PAR06'][1])	
	oQuery:setString(9,'LF')
	oQuery:setString(10,' ')
	oQuery:setUnsafe(11,self:cWhereSD1)	
	oQuery:setString(12,FWxFilial("SB1"))	
	oQuery:setString(13,jParams['MV_PAR03'][1])	
	oQuery:setString(14,jParams['MV_PAR04'][1]) 
	oQuery:setString(15,jParams['MV_PAR08'][1])	
	oQuery:setString(16,jParams['MV_PAR09'][1])	
	oQuery:setString(17,' ')
	oQuery:setString(18,FWxFilial("SF4"))
	oQuery:setString(19,'S')
	oQuery:setString(20,' ')
	oQuery:setString(21,FWxFilial("SD2"))	
	oQuery:setString(22,Dtos(dDataDe))	
	oQuery:setString(23,Dtos(dDataAte))	
	oQuery:setString(24,'LF')	
	oQuery:setString(25,jParams['MV_PAR05'][1])	
	oQuery:setString(26,jParams['MV_PAR06'][1])	
	oQuery:setString(27,' ')
	oQuery:setUnsafe(28,self:cWhereSD2) 		
	oQuery:setString(29,FWxFilial("SB1"))		
	oQuery:setString(30,jParams['MV_PAR03'][1])
	oQuery:setString(31,jParams['MV_PAR04'][1])
	oQuery:setString(32,jParams['MV_PAR08'][1])
	oQuery:setString(33,jParams['MV_PAR09'][1])
	oQuery:setString(34,' ')
	oQuery:setString(35,FWxFilial("SD3"))	
	oQuery:setString(36,Dtos(dDataDe))	
	oQuery:setString(37,Dtos(dDataAte))	
	oQuery:setString(38,jParams['MV_PAR05'][1])	
	oQuery:setString(39,jParams['MV_PAR06'][1])	
	oQuery:setString(40,'S')
	oQuery:setString(41,' ')
	oQuery:setUnsafe(42,self:cWhereSD3)	
	oQuery:setString(43,FWxFilial("SB1"))	
	oQuery:setString(44,jParams['MV_PAR08'][1])	
	oQuery:setString(45,jParams['MV_PAR09'][1])	
	oQuery:setString(46,jParams['MV_PAR03'][1])	
	oQuery:setString(47,jParams['MV_PAR04'][1])	
	oQuery:setString(48,' ')
	oQuery:setString(49,FWxFilial("SB1"))
	oQuery:setString(50,jParams['MV_PAR03'][1])	
	oQuery:setString(51,jParams['MV_PAR04'][1])	
	oQuery:setString(52,jParams['MV_PAR08'][1])	
	oQuery:setString(53,jParams['MV_PAR09'][1])	
	oQuery:setString(54,jParams['MV_PAR05'][1])	
	oQuery:setString(55,jParams['MV_PAR06'][1])	
	oQuery:setString(56,' ')
	oQuery:setUnsafe(57,self:cWhereSB1)	
	oQuery:setUnsafe(58,cFiltro + oFilter:getSQLExpression())
	
	cAliasTmp := oQuery:OpenAlias()
	

	If nPage == 1
		(cAliasTmp)->(dbGoTop())
	Else
		//Encontra a quantidade de itens que irá pular de acordo com a página atual
		nSkip := ((nPage - 1) * self:getPageSize())     
		(cAliasTmp)->(dbSkip(nSkip))
	Endif

	While (cAliasTmp)->( !Eof() )

		cProduto := (cAliasTmp)->PRODUTO
		lMov	   := .F. // Validacao para produtos sem Movimentacao
		aProd    := {}
			
		//----------------------------------------------------------------
		// Limpa array de saldos e o inicializa com as datas
		//----------------------------------------------------------------
		aVars:= {}
		nLen := DateDiffDay( dDataDe , dDataAte )
		For nX:=1 to nLen   // Montando Variaveis de Calculo
			Aadd(Avars,{ dTos( DaySum(dDataDe , nX-1  ) ),0,0})
		Next nX
		nSiVl := 0
		nSiQt := 0
		nQtCo := 0
		nVlCo := 0
		//----------------------------------------------------------------
		// SB1 - Verifica Produtos Sem Movimento
		//----------------------------------------------------------------
		dbSelectArea(cAliasTmp)
		While !Eof() .And. (cAliasTmp)->PRODUTO == cProduto .And. Alltrim((cAliasTmp)->ARQ) == "SB1"
			aProd := {(cAliasTmp)->PRODUTO,(cAliasTmp)->CODITE,(cAliasTmp)->TIPO,(cAliasTmp)->GRUPO,(cAliasTmp)->DESCR,(cAliasTmp)->UM}
			dbSkip()
		EndDo

		//----------------------------------------------------------------
		// Monta movimentacao pelo SD1 dentro do array de Saldos
		//----------------------------------------------------------------
		dbSelectArea(cAliasTmp)
		While !Eof() .And. (cProduto == (cAliasTmp)->PRODUTO) .And. Alltrim((cAliasTmp)->ARQ) == "SD1"
			dbSelectArea("SF4")
			If MsSeek(xFilial("SF4")+(cAliasTmp)->TES)
				dbSelectArea(cAliasTmp)
				If SF4->F4_ESTOQUE == "S"
					lMov:= .T.
					nX:=Ascan(aVars, {|x| x[1] == (cAliasTmp)->DTAUX })
					If Len(aVars) > 0 .And. nX > 0
						aVars[nX,2] += (cAliasTmp)->QUANTIDADE
						aVars[nX,3] += &(cAliasTmp+'->CUSTO'+cMoeda)
					EndIf
					nQtco += (cAliasTmp)->QUANTIDADE
					nVlco += &(cAliasTmp+'->CUSTO'+cMoeda)
				EndIf
			EndIf	
			dbSelectArea(cAliasTmp)
			aProd := {(cAliasTmp)->PRODUTO,(cAliasTmp)->CODITE,(cAliasTmp)->TIPO,(cAliasTmp)->GRUPO,(cAliasTmp)->DESCR,(cAliasTmp)->UM}
			dbSkip()
		EndDo
		//----------------------------------------------------------------
		// Monta movimentacao pelo SD2 dentro do array de Saldos
		//----------------------------------------------------------------
		dbSelectArea(cAliasTmp)
		While !Eof() .And. (cProduto == (cAliasTmp)->PRODUTO) .And. Alltrim((cAliasTmp)->ARQ) == "SD2"
			dbSelectArea("SF4")
			If MsSeek(xFilial("SF4")+(cAliasTmp)->TES)
				dbSelectArea(cAliasTmp)
				If SF4->F4_ESTOQUE == "S"
					lMov:= .T.
					nX:=Ascan(aVars, {|x| x[1] == (cAliasTmp)->DTAUX })
					If Len(aVars) > 0 .And. nX > 0
						aVars[nX,2] -= (cAliasTmp)->QUANTIDADE
						aVars[nX,3] -= &(cAliasTmp+'->CUSTO'+cMoeda)
					EndIf
				EndIf
			EndIf
			dbSelectArea(cAliasTmp)
			aProd := {(cAliasTmp)->PRODUTO,(cAliasTmp)->CODITE,(cAliasTmp)->TIPO,(cAliasTmp)->GRUPO,(cAliasTmp)->DESCR,(cAliasTmp)->UM}
			dbSkip()
		EndDo
				
		//----------------------------------------------------------------
		// Monta movimentacao pelo SD3 dentro do array de Saldos
		//----------------------------------------------------------------
		dbSelectArea(cAliasTmp)
		While !Eof() .And. (cProduto == (cAliasTmp)->PRODUTO) .And. Alltrim((cAliasTmp)->ARQ) == "SD3"
			lMov:= .T.
			If (cAliasTmp)->TES > "500"
				nX:=Ascan(aVars, {|x| x[1] == (cAliasTmp)->DTAUX })
				If Len(aVars) > 0 .And. nX > 0
					aVars[nX,2] -= (cAliasTmp)->QUANTIDADE
					aVars[nX,3] -= &(cAliasTmp+'->CUSTO'+cMoeda)
				EndIf
			Else
				nX:=Ascan(aVars, {|x| x[1] == (cAliasTmp)->DTAUX })
				If Len(aVars) > 0 .And. nX > 0
					aVars[nX,2] += (cAliasTmp)->QUANTIDADE
					aVars[nX,3] += &(cAliasTmp+'->CUSTO'+cMoeda)
				EndIf 
			EndIf
			aProd := {(cAliasTmp)->PRODUTO,(cAliasTmp)->CODITE,(cAliasTmp)->TIPO,(cAliasTmp)->GRUPO,(cAliasTmp)->DESCR,(cAliasTmp)->UM}
			dbSkip()
		EndDo

		//----------------------------------------------------------------
		// Calcula Saldo inicial pelo SB9 e monta variaveis 
		//----------------------------------------------------------------
		dbSelectArea("SB2")
		dbSetOrder(1)
		MsSeek(xFilial("SB2")+cProduto+Alltrim(jParams['MV_PAR05'][1]),.T.)
		While !Eof() .And. (B2_COD == cProduto .And. B2_LOCAL <= jParams['MV_PAR06'][1])
			aSaldo := CalcEst(SB2->B2_COD,SB2->B2_LOCAL,dDataDe)
			If Len(aSaldo) > 0
				nSiVl  += aSaldo[jParams['MV_PAR07'][1]+1]
				nSiQt  += aSaldo[1]
			EndIf
			dbSkip()
		EndDo
		//----------------------------------------------------------------
		// Soma linha do array c/ linha anterior para ter o saldo do prd.
		//----------------------------------------------------------------
		nQtMed:= 0
		nVlMed:= 0
		For nX:= 1 to Len(aVars)
			If nX == 1
				aVars[1,2] += nSiQt
				aVars[1,3] += nSiVl
			Else
				aVars[nX,2] += aVars[nX-1,2]
				aVars[nX,3] += aVars[nX-1,3]
			EndIf
			nQtMed += aVars[nX,2]
			nVlMed += aVars[nX,3]
		Next

		If Len(aVars) > 0 
			nQtMed:= nQtMed / Len (aVars)
			nVlMed:= nVlMed / Len (aVars)
		EndIf 

		If jParams['MV_PAR10'][1] == 1 .Or. (jParams['MV_PAR10'][1] == 2 .And. lMov)

			self:jItems := JsonObject():New()

			If !lVeic
				self:jItems[ "B1_COD"	] := aProd[1] // PRODUTO
			Else
				self:jItems[ "B1_COD"	] := aProd[2] + " " + aProd[1] // CODITE + PRODUTO
			EndIf

			self:jItems[ "B1_TIPO"	] := aProd[3]
			self:jItems[ "B1_GRUPO"	] := aProd[4]
			self:jItems[ "B1_DESC"	] := aProd[5]
			self:jItems[ "B1_UM"	] := aProd[6]
			self:jItems[ "QTDE_PER"	] := 0
			self:jItems[ "VLR_PER"	] := 0
			If Len(aVars) > 0 
				self:jItems[ "QTDE_PER"	] := aVars[Len(aVars),2]
				self:jItems[ "VLR_PER"	] := aVars[Len(aVars),3]
			EndIf 

			self:jItems[ "QTDE_MED"	] := nQtMed
			self:jItems[ "VLR_MED"	] := nVlMed
			If nQtco > 0
			   self:jItems[ "VLR_COM"	] := nVlco/nQtco
			Else 
				self:jItems[ "VLR_COM"	] := 0
			EndIf 

			self:jItems[ "EMPNOME"	] := cEmpExec
			self:jItems[ "FILNOME"	] := cFilExec

			self:processData()
			self:oData:appendData(self:jItems)
			nCount++

		EndIf

		//Sai do loop quando chegar no tamanho de itens da página
		If nCount == self:GetPageSize()
			Exit
		Endif

	EndDo

	//Se não for o último registro indica que terá próxima página
	If !(cAliasTmp)->(Eof())
		self:setHasNext( .T. )
	EndIf
	
	(cAliasTmp)->( DBCloseArea() )
	
Return self:oData


//-------------------------------------------------------------------
/*{Protheus.doc} getSchema
Retorna a estrutura dos campos
 
@return object: self:oSchema
 
@author Squad Entradas
@since 06/2023
@version 1.0
*/
//-------------------------------------------------------------------   
Method getSchema() as object Class AnalysisofMovementSmartViewBusinessObject

	Local aFields as Array

	aFields := {}
	aAdd( aFields , "B1_COD"		)
	aAdd( aFields , "B1_DESC"		)
	aAdd( aFields , "B1_TIPO"		)
	aAdd( aFields , "B1_UM"			)
	aAdd( aFields , "B1_GRUPO"		)
	self:AliasToSchema("SB1", aFields)

	self:addProperty( "EMPNOME"		, STR0004			, "string", STR0004				, "EMPNOME"	) //"Nome Empresa"
	self:addProperty( "FILNOME"		, STR0005			, "string", STR0005				, "FILNOME" ) //"Nome Filial"
	self:addProperty( "QTDE_PER"	, STR0006 + STR0007	, "number", STR0006 + STR0007	, "QTDE_PER") //"Saldo do Periodo em Quantidade"
	self:addProperty( "VLR_PER"		, STR0006 + STR0008	, "number", STR0006 + STR0008	, "VLR_PER"	) //"Saldo do Periodo em Valor"
	self:addProperty( "QTDE_MED"	, STR0009 + STR0007	, "number", STR0009 + STR0007	, "QTDE_MED") //"Estoque Medio em Quantidade"
	self:addProperty( "VLR_MED"		, STR0009 + STR0008	, "number", STR0009 + STR0008	, "VLR_MED" ) //"Estoque Medio em Valor"
	self:addProperty( "VLR_COM"		, STR0010			, "number", STR0010				, "VLR_COM" ) //"Valor Medio das Compras"

Return self:oSchema
