#include "protheus.ch"
#include "msobject.ch"
#include "totvs.framework.treports.integratedprovider.th"

namespace customer.purchaseorder

totvsFrameworkTReportsIntegratedProvider(active=.T., team="Framework", tables="SC7", name="Pedido de Compras", country="BRA", initialRelease="12.1.2310")

//-------------------------------------------------------------------
/*/{Protheus.doc} customerlistSmartViewBusinessObject
Classe para criação do Objeto de Negócio para Relação de Clientes 

@author FAT/CRM
@since 20/06/2023
@version 1.0
*/
//-------------------------------------------------------------------  
class POSmartViewBusinessObject from totvs.framework.treports.integratedprovider.IntegratedProvider

    public method new() as object
    public method getDisplayName() as character
    public method getDescription() as character
    public method getData() as object
    public method getSchema() as object

    protected data aFields as array

endclass

//-------------------------------------------------------------------
/*{Protheus.doc} new
Método de instância da classe
 
@return object: self
 
@author FAT/CRM
@since 21/06/2023
@version 1.0
*/
//-------------------------------------------------------------------   
method new() class POSmartViewBusinessObject 

	_Super:new()
    self:appendArea("Personalizados") 		//"Faturamento"
    self:setDisplayName("pedido de compra personalziado")	//"Clientes"
    self:setDescription("Relação de PO personalziado")	//"Relação de Clientes"
    // self:setIsLookUp(.T.)  
	// self:cAliasTmpLoc 	:= ""
	 self:aFields        := {}

return self
 
//-------------------------------------------------------------------
/*{Protheus.doc} getData
Retorna os dados do objeto de negócio
 
@param nPage, numérico, indica a página atual do relatório
@param oFilter, objeto, contém o filtro do TReports
 
@return object: self:oData
 
@author FAT/CRM
@since 12/04/2023
@version 1.0
*/
//-------------------------------------------------------------------   
method getData(nPage as numeric, oFilter as object) as object class POSmartViewBusinessObject
    
    local nCount as numeric
    local cQuery as character 
    local cAlias as character
    local oExec as Object
    local aPDFields as array
    local lObfuscated as logical
    local aAllFields as array
    local jItems as json
    local nX as numeric
    local cId as character
    local cRealName as character

    ncount := 0
    Cquery := "SELECT " + self_getSQLFields(,,,.T.) + "FROM " + RetSqlName("SC7") + " WHERE D_E_L_E_T_= ' ' "

    if oFilter:hasFilter()
        cQuery = " AND " + oFilter:getSQLExpression()
    EndIf

    oExec := FwExecStatement():new(changeQuery(cQuery))
    calias := oExec:OpenAlias()

    aPDFields := FwProtectedDataUtil():UsrAccesPDField(_cUserId,self:aFields)

    lObfuscated := len(aPDFields) != len(self:aFields)
    
    aAllFields := self:FatTrGetStructField()

    if nPage > 1
        nSkip := ((nPage -1)* self:getPageSize())

        (cAlias)->(DbSkip(nSkip))

    EndIF
    
    while !(cAlias)->(Eof())

        jItems := JsonObject():new()

        for nX := 1 to len(aAllFields)
            cId := aAllFields[nX]:getName() //Pedido
            cRealName := aAllFields[nX]:getRealName()

            if lObfuscated .and. ascan(aPDFields,cRealName) ==0
                if aAllFields[nX]:getType() == "date"
                    jItems[cId] := nil
                elseif aAllFields[nX]:getType() =="number"
                    jItems[cId]= val(replicate("9",Len(cAlias->&(cRealName))))
                else 
                    jItems[cId] := FwProtectedDataUtil():ValueAsteriskToAnonymous(cAlias->&(cRealName))
                EndIf
            else
                if aAllFields[nX]:getType() == "date"
                    jItems[cId] := totvs.framework.treports.date.stringToTimeStamp(cAlias->&(cRealName))
                else
                    jItems[cId] = cAlias->&(cRealName)
                EndIf
            Endif
        next nX

        self:appendData(jItems)
        (calias)->(DbSkip())
        nCount++

        if nCount == self:getPageSize()
            exit
        Endif

    EndDo

    self:setHasNext(!(cAlias)->(Eof()))

    (cAlias)->(dbCloseArea())
return self:oData

//-------------------------------------------------------------------
/*{Protheus.doc} getSchema
Retorna a estrutura dos campos
 
@return object: self:oSchema
 
@author FAT/CRM
@since 12/04/2023
@version 1.0
*/
//-------------------------------------------------------------------   
method getSchema() as object class POSmartViewBusinessObject

    self:aFields := {"C7_NUM","C7_DESCRI"}
   self:aliasToSchema("SC7",self:aFields)

return self:oSchema
